{$WARN UNSAFE_TYPE OFF}

unit SOMIRTest.DumpOut;

interface
uses
  SOM.DelphiFeatures, SOM.Thin;

{$INCLUDE 'SOM.DelphiFeatures.inc'}

type
  { Forward definitions }
  SOMObject = class;
  Contained = class;
  AttributeDef = class;
  BOA = class;
  SOMEEvent = class;
  SOMEClientEvent = class;
  Context = class;
  ConstantDef = class;
  Container = class;
  SOMEEMan = class;
  SOMEEMRegisterData = class;
  ExceptionDef = class;
  ImplementationDef = class;
  ImplRepository = class;
  InterfaceDef = class;
  ModuleDef = class;
  NVList = class;
  ObjectMgr = class;
  OperationDef = class;
  ORB = class;
  ParameterDef = class;
  Principal = class;
  Repository = class;
  Request = class;
  SOMTEntryC = class;
  SOMTAttributeEntryC = class;
  SOMTBaseClassEntryC = class;
  SOMTClassEntryC = class;
  SOMTCommonEntryC = class;
  SOMTConstEntryC = class;
  SOMTDataEntryC = class;
  SOMTEmitC = class;
  SOMTEnumEntryC = class;
  SOMTEnumNameEntryC = class;
  SOMTMetaClassEntryC = class;
  SOMTMethodEntryC = class;
  SOMTModuleEntryC = class;
  SOMTParameterEntryC = class;
  SOMTPassthruEntryC = class;
  SOMTSequenceEntryC = class;
  SOMTStringEntryC = class;
  SOMTStructEntryC = class;
  SOMTTypedefEntryC = class;
  SOMTTemplateOutputC = class;
  SOMTUnionEntryC = class;
  SOMTUserDefinedTypeEntryC = class;
  SOMDServerMgr = class;
  SOMESinkEvent = class;
  SOMClass = class;
  SOMMSingleInstance = class;
  SOMMBeforeAfter = class;
  SOMClassMgr = class;
  SOMDObject = class;
  SOMDClientProxy = class;
  SOMDMetaproxy = class;
  SOMDObjectMgr = class;
  SOMDServer = class;
  SOMUTId = class;
  SOMOA = class;
  Sockets = class;
  SOMStringTableC = class;
  SOMMTraced = class;
  SOMETimerEvent = class;
  TSIdentification = class;
  TypeDef = class;
  SOMEWorkProcEvent = class;

  { Foreign types }
  somId = Pointer { WARNING: foreign type, size may be different than SizeOf(Pointer) };
  va_list = Pointer { WARNING: foreign type, size may be different than SizeOf(Pointer) };
  Sockets_in_addr = Pointer { WARNING: foreign type, size may be different than SizeOf(Pointer) };

  { Data types }
  int = LongInt;
  uchar_t = Byte;
  size_t = LongWord;
  SOMFOREIGN = Pointer;
  somToken = Pointer;
  TCKind = type LongWord;
  integer1 = ShortInt;
  integer2 = SmallInt;
  uinteger2 = Word;
  integer4 = LongInt;
  uinteger4 = LongWord;
  float4 = Single;
  float8 = Double;
  zString = CORBAString;
  fString = CORBAString;
  somMethodProc = Pointer;
  somMethodPtr = Pointer;
  somMToken = Pointer;
  somMLocator = Pointer;
  somDToken = Pointer;
  somDLocator = Pointer;
  somClassInfo = Pointer;
  SOMTokBuf = Pointer;
  somInitCtrl = Pointer;
  somInitInfo = Pointer;
  somDestructCtrl = Pointer;
  somDestructInfo = Pointer;
  somAssignCtrl = Pointer;
  somAssignInfo = Pointer;
  somRdAppType = LongWord;
  PsomClassList = ^somClassList;
  somClasses = ^somClassList;
  somObjects = Pointer;
  PsomMethodTab = ^somMethodTab;
  PsomMethodTabList = ^somMethodTabList;
  somMethodTabs = ^somMethodTabList;
  somParentMtabStructPtr = ^somMethodTabList;
  _IDL_Array1Of_Pointer = array[0 .. 0] of Pointer;
  somCClassDataStructurePtr = ^somCClassDataStructure;
  somBooleanVector = ^Byte;
  exception_type = type LongWord;
  Identifier = CORBAString;
  RepositoryId = CORBAString;
  P_IDL_ArrayOf_SOMObject = ^_IDL_ArrayOf_SOMObject;
  _IDL_Sequence_SOMObject = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_SOMObject;
  end;
  SOMObject_SOMObjectSequence = _IDL_Sequence_SOMObject;
  P_IDL_ArrayOf_Byte = ^_IDL_ArrayOf_Byte;
  _IDL_Sequence_Byte = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_Byte;
  end;
  SOMObject_BooleanSequence = _IDL_Sequence_Byte;
  P_IDL_ArrayOf_SOMObject_somObjectOffset = ^_IDL_ArrayOf_SOMObject_somObjectOffset;
  _IDL_Sequence_SOMObject_somObjectOffset = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_SOMObject_somObjectOffset;
  end;
  SOMObject_somObjectOffsets = _IDL_Sequence_SOMObject_somObjectOffset;
  Contained_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Contained_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Contained_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  AttributeDef_AttributeMode = type LongWord;
  AttributeDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  AttributeDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  AttributeDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  completion_status = type LongWord;
  ORBStatus = LongWord;
  ReferenceData = _IDL_Sequence_Byte;
  Flags = LongWord;
  ImplId = CORBAString;
  BOA_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  BOA_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  BOA_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMEEvent_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMEEvent_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMEEvent_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMEClientEvent_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMEClientEvent_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMEClientEvent_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Context_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Context_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Context_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ConstantDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ConstantDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ConstantDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Container_InterfaceName = CORBAString;
  Container_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Container_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Container_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  EMRegProc = Pointer;
  EMMethodProc = Pointer;
  EMMethodProcEv = Pointer;
  SOMEEMan_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMEEMan_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMEEMan_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMEEMRegisterData_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMEEMRegisterData_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMEEMRegisterData_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ExceptionDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ExceptionDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ExceptionDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ImplementationDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ImplementationDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ImplementationDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ImplRepository_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ImplRepository_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ImplRepository_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ContextIdentifier = CORBAString;
  InterfaceDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  InterfaceDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  InterfaceDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  InterfaceDef_InterfaceName = { inherited } Container_InterfaceName;
  ModuleDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ModuleDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ModuleDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ModuleDef_InterfaceName = { inherited } Container_InterfaceName;
  NVList_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  NVList_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  NVList_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ObjectMgr_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ObjectMgr_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ObjectMgr_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  OperationDef_OperationMode = type LongWord;
  OperationDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  OperationDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  OperationDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  OperationDef_InterfaceName = { inherited } Container_InterfaceName;
  ORB_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ORB_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ORB_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  ParameterDef_ParameterMode = type LongWord;
  ParameterDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  ParameterDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  ParameterDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Principal_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Principal_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Principal_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Repository_irOpenErrorCodes = type LongWord;
  Repository_InterfaceName = { inherited } Container_InterfaceName;
  Repository_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Repository_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Repository_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Request_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Request_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Request_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Entry = Pointer;
  Mlist = Pointer;
  AttList = Pointer;
  NumberList = Pointer;
  SwitchBody = Pointer;
  SOMTTargetTypeT = type LongWord;
  SOMTTypes = LongWord;
  SOMTEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTAttributeEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTAttributeEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTAttributeEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTBaseClassEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTBaseClassEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTBaseClassEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTClassEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTClassEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTClassEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  somtVisibilityT = type LongWord;
  SOMTCommonEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTCommonEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTCommonEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTConstEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTConstEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTConstEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTDataEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTDataEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTDataEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  somtCommentStyleT = type LongWord;
  SOMTEmitC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTEmitC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTEmitC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTEnumEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTEnumEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTEnumEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTEnumNameEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTEnumNameEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTEnumNameEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTMetaClassEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTMetaClassEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTMetaClassEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTMethodEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTMethodEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTMethodEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTModuleEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTModuleEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTModuleEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  somtParameterDirectionT = type LongWord;
  SOMTParameterEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTParameterEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTParameterEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTPassthruEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTPassthruEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTPassthruEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTSequenceEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTSequenceEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTSequenceEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTStringEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTStringEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTStringEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTStructEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTStructEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTStructEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTTypedefEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTTypedefEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTTypedefEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTTemplateOutputC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTTemplateOutputC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTTemplateOutputC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTUnionEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTUnionEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTUnionEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMTUserDefinedTypeEntryC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMTUserDefinedTypeEntryC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMTUserDefinedTypeEntryC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDServerMgr_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDServerMgr_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDServerMgr_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMESinkEvent_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMESinkEvent_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMESinkEvent_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  P_IDL_ArrayOf_Pointer = ^_IDL_ArrayOf_Pointer;
  _IDL_Sequence_Pointer = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_Pointer;
  end;
  SOMClass_somTokenSequence = _IDL_Sequence_Pointer;
  P_IDL_ArrayOf_SOMClass = ^_IDL_ArrayOf_SOMClass;
  _IDL_Sequence_SOMClass = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_SOMClass;
  end;
  SOMClass_SOMClassSequence = _IDL_Sequence_SOMClass;
  P_IDL_ArrayOf_SOMClass_somOffsetInfo = ^_IDL_ArrayOf_SOMClass_somOffsetInfo;
  _IDL_Sequence_SOMClass_somOffsetInfo = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_SOMClass_somOffsetInfo;
  end;
  SOMClass_somOffsets = _IDL_Sequence_SOMClass_somOffsetInfo;
  P_IDL_ArrayOf_somId = ^_IDL_ArrayOf_somId;
  _IDL_Sequence_somId = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_somId;
  end;
  SOMClass_somIdSequence = _IDL_Sequence_somId;
  SOMClass_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMClass_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMClass_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMMSingleInstance_somTokenSequence = { inherited } SOMClass_somTokenSequence;
  SOMMSingleInstance_SOMClassSequence = { inherited } SOMClass_SOMClassSequence;
  SOMMSingleInstance_somOffsets = { inherited } SOMClass_somOffsets;
  SOMMSingleInstance_somIdSequence = { inherited } SOMClass_somIdSequence;
  SOMMSingleInstance_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMMSingleInstance_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMMSingleInstance_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMMBeforeAfter_somTokenSequence = { inherited } SOMClass_somTokenSequence;
  SOMMBeforeAfter_SOMClassSequence = { inherited } SOMClass_SOMClassSequence;
  SOMMBeforeAfter_somOffsets = { inherited } SOMClass_somOffsets;
  SOMMBeforeAfter_somIdSequence = { inherited } SOMClass_somIdSequence;
  SOMMBeforeAfter_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMMBeforeAfter_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMMBeforeAfter_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMClassMgr_SOMClassArray = ^SOMClass;
  SOMClassMgr_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMClassMgr_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMClassMgr_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDObject_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDObject_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDObject_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDClientProxy_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDClientProxy_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDClientProxy_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDMetaproxy_somTokenSequence = { inherited } SOMClass_somTokenSequence;
  SOMDMetaproxy_SOMClassSequence = { inherited } SOMClass_SOMClassSequence;
  SOMDMetaproxy_somOffsets = { inherited } SOMClass_somOffsets;
  SOMDMetaproxy_somIdSequence = { inherited } SOMClass_somIdSequence;
  SOMDMetaproxy_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDMetaproxy_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDMetaproxy_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDObjectMgr_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDObjectMgr_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDObjectMgr_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMDServer_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMDServer_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMDServer_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMUTId_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMUTId_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMUTId_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMOA_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMOA_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMOA_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  Sockets_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  Sockets_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  Sockets_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  PentryT = ^entryT;
  PPentryT = ^PentryT;
  tablePT = ^PPentryT;
  SOMStringTableC_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMStringTableC_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMStringTableC_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMMTraced_somTokenSequence = { inherited } SOMClass_somTokenSequence;
  SOMMTraced_SOMClassSequence = { inherited } SOMClass_SOMClassSequence;
  SOMMTraced_somOffsets = { inherited } SOMClass_somOffsets;
  SOMMTraced_somIdSequence = { inherited } SOMClass_somIdSequence;
  SOMMTraced_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMMTraced_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMMTraced_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMETimerEvent_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMETimerEvent_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMETimerEvent_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  TSIdentification_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  TSIdentification_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  TSIdentification_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  TypeDef_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  TypeDef_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  TypeDef_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;
  SOMEWorkProcEvent_SOMObjectSequence = { inherited } SOMObject_SOMObjectSequence;
  SOMEWorkProcEvent_BooleanSequence = { inherited } SOMObject_BooleanSequence;
  SOMEWorkProcEvent_somObjectOffsets = { inherited } SOMObject_somObjectOffsets;

  { Records }
  somMethodTab = record
    classObject: SOMClass;
  end;
  SOMAny = record
    mtab: PsomMethodTab;
  end;
  somMethodInfo = record
    callType: LongWord;
    va_listSize: LongInt;
    float_map: PLongWord;
  end;
  somMethodDataStruct = record
    id: somId;
    SOM_type: LongInt;
    descriptor: somId;
    mToken: Pointer;
    method: Pointer;
    shared: PPointer;
  end;
  somMethodData = record
    id: somId;
    SOM_type: LongInt;
    descriptor: somId;
    mToken: Pointer;
    method: Pointer;
    shared: PPointer;
  end;
  somClassList = record
    cls: SOMClass;
    next: PsomClassList;
  end;
  somMethodTabList = record
    mtab: PsomMethodTab;
    next: PsomMethodTabList;
  end;
  somClassDataStructure = record
    classObject: SOMClass;
    tokens: _IDL_Array1Of_Pointer;
  end;
  somCClassDataStructure = record
    parentMtab: PsomMethodTabList;
    instanceDataToken: Pointer;
    ptrs: _IDL_Array1Of_Pointer;
  end;
  _IDL_Array12Of_Byte = array[0 .. 11] of Byte;
  Environment = record
    major: exception_type;
    opaque_data: _IDL_Array12Of_Byte;
  end;
  somModifier = record
    name: CORBAString;
    value: CORBAString;
  end;
  SOMObject_somObjectOffset = record
    obj: SOMObject;
    offset: LongInt;
  end;
  Contained_Description = record
    name: CORBAString;
    value: any;
  end;
  Contained_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  AttributeDef_AttributeDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_type: TypeCode;
    mode: AttributeDef_AttributeMode;
  end;
  AttributeDef_Description = { inherited } Contained_Description;
  AttributeDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  NamedValue = record
    name: CORBAString;
    argument: any;
    len: LongInt;
    arg_modes: LongWord;
  end;
  BOA_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMEEvent_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMEClientEvent_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Context_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ConstantDef_ConstantDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_type: TypeCode;
    value: any;
  end;
  ConstantDef_Description = { inherited } Contained_Description;
  ConstantDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Container_ContainerDescription = record
    contained_object: Contained;
    name: CORBAString;
    value: any;
  end;
  Container_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMEEMan_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMEEMRegisterData_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ExceptionDef_ExceptionDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_type: TypeCode;
  end;
  ExceptionDef_Description = { inherited } Contained_Description;
  ExceptionDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ImplementationDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ImplRepository_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  P_IDL_ArrayOf_CORBAString = ^_IDL_ArrayOf_CORBAString;
  _IDL_Sequence_CORBAString = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_CORBAString;
  end;
  P_IDL_ArrayOf_ParameterDef_ParameterDescription = ^_IDL_ArrayOf_ParameterDef_ParameterDescription;
  _IDL_Sequence_ParameterDef_ParameterDescription = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_ParameterDef_ParameterDescription;
  end;
  P_IDL_ArrayOf_ExceptionDef_ExceptionDescription = ^_IDL_ArrayOf_ExceptionDef_ExceptionDescription;
  _IDL_Sequence_ExceptionDef_ExceptionDescription = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_ExceptionDef_ExceptionDescription;
  end;
  P_IDL_ArrayOf_OperationDef_OperationDescription = ^_IDL_ArrayOf_OperationDef_OperationDescription;
  _IDL_Sequence_OperationDef_OperationDescription = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_OperationDef_OperationDescription;
  end;
  P_IDL_ArrayOf_AttributeDef_AttributeDescription = ^_IDL_ArrayOf_AttributeDef_AttributeDescription;
  _IDL_Sequence_AttributeDef_AttributeDescription = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_AttributeDef_AttributeDescription;
  end;
  InterfaceDef_FullInterfaceDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    operation: _IDL_Sequence_OperationDef_OperationDescription;
    attributes: _IDL_Sequence_AttributeDef_AttributeDescription;
  end;
  InterfaceDef_InterfaceDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
  end;
  InterfaceDef_Description = { inherited } Contained_Description;
  InterfaceDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  InterfaceDef_ContainerDescription = { inherited } Container_ContainerDescription;
  ModuleDef_ModuleDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
  end;
  ModuleDef_Description = { inherited } Contained_Description;
  ModuleDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ModuleDef_ContainerDescription = { inherited } Container_ContainerDescription;
  NVList_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ObjectMgr_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  OperationDef_OperationDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_result: TypeCode;
    mode: OperationDef_OperationMode;
    contexts: _IDL_Sequence_CORBAString;
    parameter: _IDL_Sequence_ParameterDef_ParameterDescription;
    exceptions: _IDL_Sequence_ExceptionDef_ExceptionDescription;
  end;
  OperationDef_Description = { inherited } Contained_Description;
  OperationDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  OperationDef_ContainerDescription = { inherited } Container_ContainerDescription;
  ORB_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  ParameterDef_ParameterDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_type: TypeCode;
    mode: ParameterDef_ParameterMode;
  end;
  ParameterDef_Description = { inherited } Contained_Description;
  ParameterDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Principal_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Repository_RepositoryDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
  end;
  Repository_irOpenError = { exception } record
    errorCode: Repository_irOpenErrorCodes;
    fileName: CORBAString;
  end;
  Repository_ContainerDescription = { inherited } Container_ContainerDescription;
  Repository_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Request_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTAttributeEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTBaseClassEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTClassEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTCommonEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTConstEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTDataEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTEmitC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTEnumEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTEnumNameEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTMetaClassEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTMethodEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTModuleEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTParameterEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTPassthruEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTSequenceEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTStringEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTStructEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTTypedefEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTTemplateOutputC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  PSOMTUnionEntryC_somtLabelList = ^SOMTUnionEntryC_somtLabelList;
  SOMTUnionEntryC_somtLabelList = record
    SOM_label: CORBAString;
    nextLabel: PSOMTUnionEntryC_somtLabelList;
  end;
  SOMTUnionEntryC_somtCaseEntry = record
    caseLabels: PSOMTUnionEntryC_somtLabelList;
    memberType: SOMTEntryC;
    memberDeclarator: SOMTDataEntryC;
  end;
  SOMTUnionEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMTUserDefinedTypeEntryC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDServerMgr_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMESinkEvent_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMClass_somOffsetInfo = record
    cls: SOMClass;
    offset: LongInt;
  end;
  SOMClass_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMMSingleInstance_somOffsetInfo = { inherited } SOMClass_somOffsetInfo;
  SOMMSingleInstance_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMMBeforeAfter_somOffsetInfo = { inherited } SOMClass_somOffsetInfo;
  SOMMBeforeAfter_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMClassMgr_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDObject_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDClientProxy_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDMetaproxy_somOffsetInfo = { inherited } SOMClass_somOffsetInfo;
  SOMDMetaproxy_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDObjectMgr_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMDServer_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMUTId_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMOA_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  Sockets_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  entryT = record
    key: CORBAString;
    value: CORBAString;
    next: PentryT;
  end;
  SOMStringTableC_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMMTraced_somOffsetInfo = { inherited } SOMClass_somOffsetInfo;
  SOMMTraced_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  StExcep_UNKNOWN = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_BAD_PARAM = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_NO_MEMORY = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_IMP_LIMIT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_COMM_FAILURE = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INV_OBJREF = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_NO_PERMISSION = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INTERNAL = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_MARSHAL = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INITIALIZE = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_NO_IMPLEMENT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_BAD_TYPECODE = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_BAD_OPERATION = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_NO_RESOURCES = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_NO_RESPONSE = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_PERSIST_STORE = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_BAD_INV_ORDER = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_TRANSIENT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_FREE_MEM = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INV_IDENT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INV_FLAG = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_INTF_REPOS = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_CONTEXT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_OBJ_ADAPTER = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_DATA_CONVERSION = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_OPSYS = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_WMQUIT = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_DISPATCH = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_TransactionRequired = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_TransactionRolledBack = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_InvalidTransaction = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  StExcep_WrongTransaction = { exception } record
    minor: LongWord;
    completed: completion_status;
  end;
  SOMETimerEvent_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  TSIdentification_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  TypeDef_TypeDescription = record
    name: CORBAString;
    id: CORBAString;
    defined_in: CORBAString;
    SOM_type: TypeCode;
  end;
  TypeDef_Description = { inherited } Contained_Description;
  TypeDef_somObjectOffset = { inherited } SOMObject_somObjectOffset;
  SOMEWorkProcEvent_somObjectOffset = { inherited } SOMObject_somObjectOffset;

  { Classes }

  SOMObject = class
  public
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  P_IDL_ArrayOf_somModifier = ^_IDL_ArrayOf_somModifier;
  _IDL_Sequence_somModifier = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_somModifier;
  end;
  P_IDL_ArrayOf_Container = ^_IDL_ArrayOf_Container;
  _IDL_Sequence_Container = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_Container;
  end;
  Contained = class
  private
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  AttributeDef = class
  private
    function _get_type: TypeCode;
    procedure _set_type(SOM_type: TypeCode);
    function _get_mode: AttributeDef_AttributeMode;
    procedure _set_mode(mode: AttributeDef_AttributeMode);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property SOM_type: TypeCode read _get_type write _set_type;
    property mode: AttributeDef_AttributeMode read _get_mode write _set_mode;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  BOA = class
  public
    function create(id: _IDL_Sequence_Byte; intf: InterfaceDef; impl: ImplementationDef): SOMDObject;
    procedure dispose(obj: SOMDObject);
    function get_id(obj: SOMDObject): _IDL_Sequence_Byte;
    function get_principal(obj: SOMDObject; req_ev: Environment): Principal;
    procedure set_exception(major: exception_type; userid: CORBAString; param: Pointer);
    procedure impl_is_ready(impl: ImplementationDef);
    procedure deactivate_impl(impl: ImplementationDef);
    procedure change_implementation(obj: SOMDObject; impl: ImplementationDef);
    procedure obj_is_ready(obj: SOMDObject; impl: ImplementationDef);
    procedure deactivate_obj(obj: SOMDObject);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMEEvent = class
  public
    function somevGetEventTime: LongWord;
    function somevGetEventType: LongWord;
    procedure somevSetEventTime(time: LongWord);
    procedure somevSetEventType(SOM_type: LongWord);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMEClientEvent = class
  public
    function somevGetEventClientData: Pointer;
    function somevGetEventClientType: CORBAString;
    procedure somevSetEventClientData(clientData: Pointer);
    procedure somevSetEventClientType(clientType: CORBAString);
    function somevGetEventTime: LongWord;
    function somevGetEventType: LongWord;
    procedure somevSetEventTime(time: LongWord);
    procedure somevSetEventType(SOM_type: LongWord);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  Context = class
  public
    function set_one_value(prop_name: CORBAString; value: CORBAString): LongWord;
    function set_values(values: NVList): LongWord;
    function get_values(start_scope: CORBAString; op_flags: LongWord; prop_name: CORBAString; out values: NVList): LongWord;
    function delete_values(prop_name: CORBAString): LongWord;
    function create_child(ctx_name: CORBAString; out child_ctx: Context): LongWord;
    function destroy(flags: LongWord): LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  ConstantDef = class
  private
    function _get_type: TypeCode;
    procedure _set_type(SOM_type: TypeCode);
    function _get_value: any;
    procedure _set_value(value: any);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property SOM_type: TypeCode read _get_type write _set_type;
    property value: any read _get_value write _set_value;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  P_IDL_ArrayOf_Contained = ^_IDL_ArrayOf_Contained;
  _IDL_Sequence_Contained = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_Contained;
  end;
  P_IDL_ArrayOf_Container_ContainerDescription = ^_IDL_ArrayOf_Container_ContainerDescription;
  _IDL_Sequence_Container_ContainerDescription = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_Container_ContainerDescription;
  end;
  Container = class
  public
    function contents(limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function lookup_name(search_name: CORBAString; levels_to_search: LongInt; limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function describe_contents(limit_type: CORBAString; exclude_inherited: CORBABoolean; max_returned_objs: LongInt): _IDL_Sequence_Container_ContainerDescription;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMEEMan = class
  public
    procedure someGetEManSem;
    procedure someReleaseEManSem;
    procedure someChangeRegData(registrationId: LongInt; registerData: SOMEEMRegisterData);
    procedure someProcessEvent(mask: LongWord);
    procedure someProcessEvents;
    procedure someQueueEvent(event: SOMEClientEvent);
    function someRegister(registerData: SOMEEMRegisterData; targetObject: SOMObject; targetMethod: CORBAString; targetData: Pointer): LongInt;
    function someRegisterEv(registerData: SOMEEMRegisterData; targetObject: SOMObject; var callbackEv: Environment; targetMethod: CORBAString; targetData: Pointer): LongInt;
    function someRegisterProc(registerData: SOMEEMRegisterData; targetProcedure: PPointer; targetData: Pointer): LongInt;
    procedure someShutdown;
    procedure someUnRegister(registrationId: LongInt);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMEEMRegisterData = class
  public
    procedure someClearRegData;
    procedure someSetRegDataClientType(clientType: CORBAString);
    procedure someSetRegDataEventMask(eventType: LongInt; ap: va_list);
    procedure someSetRegDataSink(sink: LongInt);
    procedure someSetRegDataSinkMask(sinkMask: LongWord);
    procedure someSetRegDataTimerCount(count: LongInt);
    procedure someSetRegDataTimerInterval(interval: LongInt);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  ExceptionDef = class
  private
    function _get_type: TypeCode;
    procedure _set_type(SOM_type: TypeCode);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property SOM_type: TypeCode read _get_type write _set_type;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  ImplementationDef = class
  private
    function _get_impl_id: CORBAString;
    procedure _set_impl_id(impl_id: CORBAString);
    function _get_impl_alias: CORBAString;
    procedure _set_impl_alias(impl_alias: CORBAString);
    function _get_impl_program: CORBAString;
    procedure _set_impl_program(impl_program: CORBAString);
    function _get_impl_flags: LongWord;
    procedure _set_impl_flags(impl_flags: LongWord);
    function _get_impl_server_class: CORBAString;
    procedure _set_impl_server_class(impl_server_class: CORBAString);
    function _get_impl_refdata_file: CORBAString;
    procedure _set_impl_refdata_file(impl_refdata_file: CORBAString);
    function _get_impl_refdata_bkup: CORBAString;
    procedure _set_impl_refdata_bkup(impl_refdata_bkup: CORBAString);
    function _get_impl_hostname: CORBAString;
    procedure _set_impl_hostname(impl_hostname: CORBAString);
  public
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property impl_id: CORBAString read _get_impl_id write _set_impl_id;
    property impl_alias: CORBAString read _get_impl_alias write _set_impl_alias;
    property impl_program: CORBAString read _get_impl_program write _set_impl_program;
    property impl_flags: LongWord read _get_impl_flags write _set_impl_flags;
    property impl_server_class: CORBAString read _get_impl_server_class write _set_impl_server_class;
    property impl_refdata_file: CORBAString read _get_impl_refdata_file write _set_impl_refdata_file;
    property impl_refdata_bkup: CORBAString read _get_impl_refdata_bkup write _set_impl_refdata_bkup;
    property impl_hostname: CORBAString read _get_impl_hostname write _set_impl_hostname;
  end;

  P_IDL_ArrayOf_ImplementationDef = ^_IDL_ArrayOf_ImplementationDef;
  _IDL_Sequence_ImplementationDef = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_ImplementationDef;
  end;
  ImplRepository = class
  public
    function find_impldef(implid: CORBAString): ImplementationDef;
    function find_impldef_by_alias(alias_name: CORBAString): ImplementationDef;
    function find_all_impldefs(out outimpldefs: _IDL_Sequence_ImplementationDef): LongWord;
    function find_impldef_by_class(classname: CORBAString): _IDL_Sequence_ImplementationDef;
    procedure add_impldef(impldef: ImplementationDef);
    procedure update_impldef(impldef: ImplementationDef);
    procedure delete_impldef(implid: CORBAString);
    procedure add_class_to_impldef(implid: CORBAString; classname: CORBAString);
    procedure remove_class_from_impldef(implid: CORBAString; classname: CORBAString);
    procedure remove_class_from_all(classname: CORBAString);
    function find_classes_by_impldef(implid: CORBAString): _IDL_Sequence_CORBAString;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  InterfaceDef = class
  private
    function _get_base_interfaces: _IDL_Sequence_CORBAString;
    procedure _set_base_interfaces(base_interfaces: _IDL_Sequence_CORBAString);
    function _get_instanceData: TypeCode;
    procedure _set_instanceData(instanceData: TypeCode);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function describe_interface: InterfaceDef_FullInterfaceDescription;
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    function contents(limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function lookup_name(search_name: CORBAString; levels_to_search: LongInt; limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function describe_contents(limit_type: CORBAString; exclude_inherited: CORBABoolean; max_returned_objs: LongInt): _IDL_Sequence_Container_ContainerDescription;
    property base_interfaces: _IDL_Sequence_CORBAString read _get_base_interfaces write _set_base_interfaces;
    property instanceData: TypeCode read _get_instanceData write _set_instanceData;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  ModuleDef = class
  private
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    function contents(limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function lookup_name(search_name: CORBAString; levels_to_search: LongInt; limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function describe_contents(limit_type: CORBAString; exclude_inherited: CORBABoolean; max_returned_objs: LongInt): _IDL_Sequence_Container_ContainerDescription;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  NVList = class
  public
    function add_item(item_name: CORBAString; item_type: TypeCode; value: Pointer; value_len: LongInt; item_flags: LongWord): LongWord;
    function free: LongWord;
    function free_memory: LongWord;
    function get_count(out count: LongInt): LongWord;
    function set_item(item_number: LongInt; item_name: CORBAString; item_type: TypeCode; value: Pointer; value_len: LongInt; item_flags: LongWord): LongWord;
    function get_item(item_number: LongInt; out item_name: CORBAString; out item_type: TypeCode; out value: Pointer; out value_len: LongInt; out item_flags: LongWord): LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  ObjectMgr = class
  public
    function somdNewObject(objclass: CORBAString; hints: CORBAString): SOMObject;
    function somdGetIdFromObject(obj: SOMObject): CORBAString;
    function somdGetObjectFromId(id: CORBAString): SOMObject;
    procedure somdReleaseObject(obj: SOMObject);
    procedure somdDestroyObject(obj: SOMObject);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  OperationDef = class
  private
    function _get_result: TypeCode;
    procedure _set_result(SOM_result: TypeCode);
    function _get_mode: OperationDef_OperationMode;
    procedure _set_mode(mode: OperationDef_OperationMode);
    function _get_contexts: _IDL_Sequence_CORBAString;
    procedure _set_contexts(contexts: _IDL_Sequence_CORBAString);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    function contents(limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function lookup_name(search_name: CORBAString; levels_to_search: LongInt; limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function describe_contents(limit_type: CORBAString; exclude_inherited: CORBABoolean; max_returned_objs: LongInt): _IDL_Sequence_Container_ContainerDescription;
    property SOM_result: TypeCode read _get_result write _set_result;
    property mode: OperationDef_OperationMode read _get_mode write _set_mode;
    property contexts: _IDL_Sequence_CORBAString read _get_contexts write _set_contexts;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  ORB = class
  public
    function object_to_string(obj: SOMDObject): CORBAString;
    function string_to_object(str: CORBAString): SOMDObject;
    function create_list(count: LongInt; out new_list: NVList): LongWord;
    function create_operation_list(oper: OperationDef; out new_list: NVList): LongWord;
    function get_default_context(out ctx: Context): LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  ParameterDef = class
  private
    function _get_type: TypeCode;
    procedure _set_type(SOM_type: TypeCode);
    function _get_mode: ParameterDef_ParameterMode;
    procedure _set_mode(mode: ParameterDef_ParameterMode);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property SOM_type: TypeCode read _get_type write _set_type;
    property mode: ParameterDef_ParameterMode read _get_mode write _set_mode;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  Principal = class
  private
    function _get_userName: CORBAString;
    procedure _set_userName(userName: CORBAString);
    function _get_hostName: CORBAString;
    procedure _set_hostName(hostName: CORBAString);
  public
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property userName: CORBAString read _get_userName write _set_userName;
    property hostName: CORBAString read _get_hostName write _set_hostName;
  end;

  Repository = class
  public
    function lookup_id(search_id: CORBAString): Contained;
    function lookup_modifier(name: CORBAString; modifier: CORBAString): CORBAString;
    procedure release_cache;
    function contents(limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function lookup_name(search_name: CORBAString; levels_to_search: LongInt; limit_type: CORBAString; exclude_inherited: CORBABoolean): _IDL_Sequence_Contained;
    function describe_contents(limit_type: CORBAString; exclude_inherited: CORBABoolean; max_returned_objs: LongInt): _IDL_Sequence_Container_ContainerDescription;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  Request = class
  public
    function add_arg(name: CORBAString; arg_type: TypeCode; value: Pointer; len: LongInt; arg_flags: LongWord): LongWord;
    function invoke(invoke_flags: LongWord): LongWord;
    function send(invoke_flags: LongWord): LongWord;
    function get_response(response_flags: LongWord): LongWord;
    function destroy: LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMTEntryC = class
  private
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTAttributeEntryC = class
  private
    function _get_somtIsReadonly: CORBABoolean;
    function _get_somtAttribType: SOMTEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstAttributeDeclarator: SOMTDataEntryC;
    function somtGetNextAttributeDeclarator: SOMTDataEntryC;
    function somtGetFirstGetMethod: SOMTMethodEntryC;
    function somtGetNextGetMethod: SOMTMethodEntryC;
    function somtGetFirstSetMethod: SOMTMethodEntryC;
    function somtGetNextSetMethod: SOMTMethodEntryC;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtIsReadonly: CORBABoolean read _get_somtIsReadonly;
    property somtAttribType: SOMTEntryC read _get_somtAttribType;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTBaseClassEntryC = class
  private
    function _get_somtBaseClassDef: SOMTClassEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtBaseClassDef: SOMTClassEntryC read _get_somtBaseClassDef;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTClassEntryC = class
  private
    function _get_somtSourceFileName: CORBAString;
    function _get_somtMetaClassEntry: SOMTMetaClassEntryC;
    function _get_somtClassModule: SOMTModuleEntryC;
    function _get_somtNewMethodCount: LongInt;
    function _get_somtLocalInclude: CORBABoolean;
    function _get_somtPrivateMethodCount: LongInt;
    function _get_somtStaticMethodCount: LongInt;
    function _get_somtOverrideMethodCount: LongInt;
    function _get_somtProcMethodCount: LongInt;
    function _get_somtVAMethodCount: LongInt;
    function _get_somtBaseCount: LongInt;
    function _get_somtExternalDataCount: LongInt;
    function _get_somtPublicDataCount: LongInt;
    function _get_somtPrivateDataCount: LongInt;
    function _get_somtMetaclassFor: SOMTClassEntryC;
    function _get_somtForwardRef: CORBABoolean;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstBaseClass: SOMTBaseClassEntryC;
    function somtGetNextBaseClass: SOMTBaseClassEntryC;
    function somtGetFirstReleaseName: CORBAString;
    function somtGetNextReleaseName: CORBAString;
    function somtGetReleaseNameList(buffer: CORBAString): LongInt;
    function somtGetFirstPassthru: SOMTPassthruEntryC;
    function somtGetNextPassthru: SOMTPassthruEntryC;
    function somtGetFirstData: SOMTDataEntryC;
    function somtGetNextData: SOMTDataEntryC;
    function somtGetFirstStaticData: SOMTDataEntryC;
    function somtGetNextStaticData: SOMTDataEntryC;
    function somtGetFirstMethod: SOMTMethodEntryC;
    function somtGetNextMethod: SOMTMethodEntryC;
    function somtGetFirstInheritedMethod: SOMTMethodEntryC;
    function somtGetNextInheritedMethod: SOMTMethodEntryC;
    function somtGetFirstAttribute: SOMTAttributeEntryC;
    function somtGetNextAttribute: SOMTAttributeEntryC;
    function somtGetFirstStruct: SOMTStructEntryC;
    function somtGetNextStruct: SOMTStructEntryC;
    function somtGetFirstTypedef: SOMTTypedefEntryC;
    function somtGetNextTypedef: SOMTTypedefEntryC;
    function somtGetFirstUnion: SOMTUnionEntryC;
    function somtGetNextUnion: SOMTUnionEntryC;
    function somtGetFirstEnum: SOMTEnumEntryC;
    function somtGetNextEnum: SOMTEnumEntryC;
    function somtGetFirstConstant: SOMTConstEntryC;
    function somtGetNextConstant: SOMTConstEntryC;
    function somtGetFirstSequence: SOMTSequenceEntryC;
    function somtGetNextSequence: SOMTSequenceEntryC;
    function somtGetFirstPubdef: SOMTEntryC;
    function somtGetNextPubdef: SOMTEntryC;
    function somtFilterNew(entry: SOMTMethodEntryC): CORBABoolean;
    function somtFilterOverridden(entry: SOMTMethodEntryC): CORBABoolean;
    function somtFilterPrivOrPub(entry: SOMTCommonEntryC): CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtSourceFileName: CORBAString read _get_somtSourceFileName;
    property somtMetaClassEntry: SOMTMetaClassEntryC read _get_somtMetaClassEntry;
    property somtClassModule: SOMTModuleEntryC read _get_somtClassModule;
    property somtNewMethodCount: LongInt read _get_somtNewMethodCount;
    property somtLocalInclude: CORBABoolean read _get_somtLocalInclude;
    property somtPrivateMethodCount: LongInt read _get_somtPrivateMethodCount;
    property somtStaticMethodCount: LongInt read _get_somtStaticMethodCount;
    property somtOverrideMethodCount: LongInt read _get_somtOverrideMethodCount;
    property somtProcMethodCount: LongInt read _get_somtProcMethodCount;
    property somtVAMethodCount: LongInt read _get_somtVAMethodCount;
    property somtBaseCount: LongInt read _get_somtBaseCount;
    property somtExternalDataCount: LongInt read _get_somtExternalDataCount;
    property somtPublicDataCount: LongInt read _get_somtPublicDataCount;
    property somtPrivateDataCount: LongInt read _get_somtPrivateDataCount;
    property somtMetaclassFor: SOMTClassEntryC read _get_somtMetaclassFor;
    property somtForwardRef: CORBABoolean read _get_somtForwardRef;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTCommonEntryC = class
  private
    function _get_somtTypeObj: SOMTEntryC;
    function _get_somtPtrs: CORBAString;
    function _get_somtArrayDimsString: CORBAString;
    function _get_somtSourceText: CORBAString;
    function _get_somtType: CORBAString;
    function _get_somtVisibility: somtVisibilityT;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstArrayDimension: LongWord;
    function somtGetNextArrayDimension: LongWord;
    function somtIsArray(out size: LongInt): CORBABoolean;
    function somtIsPointer: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtTypeObj: SOMTEntryC read _get_somtTypeObj;
    property somtPtrs: CORBAString read _get_somtPtrs;
    property somtArrayDimsString: CORBAString read _get_somtArrayDimsString;
    property somtSourceText: CORBAString read _get_somtSourceText;
    property somtType: CORBAString read _get_somtType;
    property somtVisibility: somtVisibilityT read _get_somtVisibility;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTConstEntryC = class
  private
    function _get_somtConstTypeObj: SOMTEntryC;
    function _get_somtConstType: CORBAString;
    function _get_somtConstStringVal: CORBAString;
    function _get_somtConstNumVal: LongWord;
    function _get_somtConstNumNegVal: LongInt;
    function _get_somtConstIsNegative: CORBABoolean;
    function _get_somtConstVal: CORBAString;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtConstTypeObj: SOMTEntryC read _get_somtConstTypeObj;
    property somtConstType: CORBAString read _get_somtConstType;
    property somtConstStringVal: CORBAString read _get_somtConstStringVal;
    property somtConstNumVal: LongWord read _get_somtConstNumVal;
    property somtConstNumNegVal: LongInt read _get_somtConstNumNegVal;
    property somtConstIsNegative: CORBABoolean read _get_somtConstIsNegative;
    property somtConstVal: CORBAString read _get_somtConstVal;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTDataEntryC = class
  private
    function _get_somtIsSelfRef: CORBABoolean;
    function _get_somtTypeObj: SOMTEntryC;
    function _get_somtPtrs: CORBAString;
    function _get_somtArrayDimsString: CORBAString;
    function _get_somtSourceText: CORBAString;
    function _get_somtType: CORBAString;
    function _get_somtVisibility: somtVisibilityT;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstArrayDimension: LongWord;
    function somtGetNextArrayDimension: LongWord;
    function somtIsArray(out size: LongInt): CORBABoolean;
    function somtIsPointer: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtIsSelfRef: CORBABoolean read _get_somtIsSelfRef;
    property somtTypeObj: SOMTEntryC read _get_somtTypeObj;
    property somtPtrs: CORBAString read _get_somtPtrs;
    property somtArrayDimsString: CORBAString read _get_somtArrayDimsString;
    property somtSourceText: CORBAString read _get_somtSourceText;
    property somtType: CORBAString read _get_somtType;
    property somtVisibility: somtVisibilityT read _get_somtVisibility;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  PSOM_FILE = Pointer{ opaque ^SOM_FILE };
  SOMTEmitC = class
  private
    function _get_somtTemplate: SOMTTemplateOutputC;
    procedure _set_somtTemplate(somtTemplate: SOMTTemplateOutputC);
    function _get_somtTargetFile: PSOM_FILE;
    procedure _set_somtTargetFile(somtTargetFile: PSOM_FILE);
    function _get_somtTargetClass: SOMTClassEntryC;
    procedure _set_somtTargetClass(somtTargetClass: SOMTClassEntryC);
    function _get_somtTargetModule: SOMTModuleEntryC;
    procedure _set_somtTargetModule(somtTargetModule: SOMTModuleEntryC);
    function _get_somtTargetType: SOMTTargetTypeT;
    procedure _set_somtTargetType(somtTargetType: SOMTTargetTypeT);
    function _get_somtEmitterName: CORBAString;
    procedure _set_somtEmitterName(somtEmitterName: CORBAString);
  public
    function somtGenerateSections: CORBABoolean;
    function somtOpenSymbolsFile(SOM_file: CORBAString; mode: CORBAString): PSOM_FILE;
    procedure somtSetPredefinedSymbols;
    procedure somtFileSymbols;
    procedure somtEmitProlog;
    procedure somtEmitBaseIncludesProlog;
    procedure somtEmitBaseIncludes(base: SOMTBaseClassEntryC);
    procedure somtEmitBaseIncludesEpilog;
    procedure somtEmitMetaInclude;
    procedure somtEmitClass;
    procedure somtEmitMeta;
    procedure somtEmitBaseProlog;
    procedure somtEmitBase(base: SOMTBaseClassEntryC);
    procedure somtEmitBaseEpilog;
    procedure somtEmitPassthruProlog;
    procedure somtEmitPassthru(entry: SOMTPassthruEntryC);
    procedure somtEmitPassthruEpilog;
    procedure somtEmitRelease;
    procedure somtEmitDataProlog;
    procedure somtEmitData(entry: SOMTDataEntryC);
    procedure somtEmitDataEpilog;
    procedure somtEmitAttributeProlog;
    procedure somtEmitAttribute(att: SOMTAttributeEntryC);
    procedure somtEmitAttributeEpilog;
    procedure somtEmitConstantProlog;
    procedure somtEmitConstant(con: SOMTConstEntryC);
    procedure somtEmitConstantEpilog;
    procedure somtEmitTypedefProlog;
    procedure somtEmitTypedef(td: SOMTTypedefEntryC);
    procedure somtEmitTypedefEpilog;
    procedure somtEmitStructProlog;
    procedure somtEmitStruct(struc: SOMTStructEntryC);
    procedure somtEmitStructEpilog;
    procedure somtEmitUnionProlog;
    procedure somtEmitUnion(un: SOMTUnionEntryC);
    procedure somtEmitUnionEpilog;
    procedure somtEmitEnumProlog;
    procedure somtEmitEnum(en: SOMTEnumEntryC);
    procedure somtEmitEnumEpilog;
    procedure somtEmitInterfaceProlog;
    procedure somtEmitInterface(intfc: SOMTClassEntryC);
    procedure somtEmitInterfaceEpilog;
    procedure somtEmitModuleProlog;
    procedure somtEmitModule(SOM_mod: SOMTModuleEntryC);
    procedure somtEmitModuleEpilog;
    procedure somtEmitMethodsProlog;
    procedure somtEmitMethods(method: SOMTMethodEntryC);
    procedure somtEmitMethodsEpilog;
    procedure somtEmitMethod(entry: SOMTMethodEntryC);
    procedure somtEmitEpilog;
    function somtScanBases(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtCheckVisibility(entry: SOMTMethodEntryC): CORBABoolean;
    function somtNew(entry: SOMTMethodEntryC): CORBABoolean;
    function somtImplemented(entry: SOMTMethodEntryC): CORBABoolean;
    function somtOverridden(entry: SOMTMethodEntryC): CORBABoolean;
    function somtInherited(entry: SOMTMethodEntryC): CORBABoolean;
    function somtAllVisible(entry: SOMTMethodEntryC): CORBABoolean;
    function somtAll(entry: SOMTMethodEntryC): CORBABoolean;
    function somtNewNoProc(entry: SOMTEntryC): CORBABoolean;
    function somtPrivOrPub(entry: SOMTEntryC): CORBABoolean;
    function somtNewProc(entry: SOMTEntryC): CORBABoolean;
    function somtLink(entry: SOMTEntryC): CORBABoolean;
    function somtVA(entry: SOMTEntryC): CORBABoolean;
    function somtScanMethods(filter: CORBAString; prolog: CORBAString; each: CORBAString; epilog: CORBAString; forceProlog: CORBABoolean): CORBABoolean;
    function somtScanConstants(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanTypedefs(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanStructs(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanUnions(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanEnums(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanData(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanAttributes(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanInterfaces(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanModules(prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    function somtScanPassthru(before: CORBABoolean; prolog: CORBAString; each: CORBAString; epilog: CORBAString): CORBABoolean;
    procedure somtEmitFullPassthru(before: CORBABoolean; language: CORBAString);
    function somtScanDataF(filter: CORBAString; prolog: CORBAString; each: CORBAString; epilog: CORBAString; forceProlog: CORBABoolean): CORBABoolean;
    function somtScanBasesF(filter: CORBAString; prolog: CORBAString; each: CORBAString; epilog: CORBAString; forceProlog: CORBABoolean): CORBABoolean;
    function somtGetGlobalModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstGlobalDefinition: SOMTEntryC;
    function somtGetNextGlobalDefinition: SOMTEntryC;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtTemplate: SOMTTemplateOutputC read _get_somtTemplate write _set_somtTemplate;
    property somtTargetFile: PSOM_FILE read _get_somtTargetFile write _set_somtTargetFile;
    property somtTargetClass: SOMTClassEntryC read _get_somtTargetClass write _set_somtTargetClass;
    property somtTargetModule: SOMTModuleEntryC read _get_somtTargetModule write _set_somtTargetModule;
    property somtTargetType: SOMTTargetTypeT read _get_somtTargetType write _set_somtTargetType;
    property somtEmitterName: CORBAString read _get_somtEmitterName write _set_somtEmitterName;
  end;

  SOMTEnumEntryC = class
  private
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstEnumName: SOMTEnumNameEntryC;
    function somtGetNextEnumName: SOMTEnumNameEntryC;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTEnumNameEntryC = class
  private
    function _get_somtEnumPtr: SOMTEnumEntryC;
    function _get_somtEnumVal: LongWord;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtEnumPtr: SOMTEnumEntryC read _get_somtEnumPtr;
    property somtEnumVal: LongWord read _get_somtEnumVal;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTMetaClassEntryC = class
  private
    function _get_somtMetaFile: CORBAString;
    function _get_somtMetaClassDef: SOMTClassEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtMetaFile: CORBAString read _get_somtMetaFile;
    property somtMetaClassDef: SOMTClassEntryC read _get_somtMetaClassDef;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  PCORBAString = ^CORBAString;
  SOMTMethodEntryC = class
  private
    function _get_somtIsVarargs: CORBABoolean;
    function _get_somtOriginalMethod: SOMTMethodEntryC;
    function _get_somtOriginalClass: SOMTClassEntryC;
    function _get_somtMethodGroup: SOMTEntryC;
    function _get_somtIsPrivateMethod: CORBABoolean;
    function _get_somtIsOneway: CORBABoolean;
    function _get_somtArgCount: SmallInt;
    function _get_somtContextArray: PCORBAString;
    function _get_somtCReturnType: CORBAString;
    function _get_somtTypeObj: SOMTEntryC;
    function _get_somtPtrs: CORBAString;
    function _get_somtArrayDimsString: CORBAString;
    function _get_somtSourceText: CORBAString;
    function _get_somtType: CORBAString;
    function _get_somtVisibility: somtVisibilityT;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstParameter: SOMTParameterEntryC;
    function somtGetNextParameter: SOMTParameterEntryC;
    function somtGetIDLParamList(buffer: CORBAString): CORBAString;
    function somtGetShortCParamList(buffer: CORBAString; selfParm: CORBAString; varargsParm: CORBAString): CORBAString;
    function somtGetFullCParamList(buffer: CORBAString; varargsParm: CORBAString): CORBAString;
    function somtGetShortParamNameList(buffer: CORBAString; selfParm: CORBAString; varargsParm: CORBAString): CORBAString;
    function somtGetFullParamNameList(buffer: CORBAString; varargsParm: CORBAString): CORBAString;
    function somtGetNthParameter(n: SmallInt): SOMTParameterEntryC;
    function somtGetFirstException: SOMTStructEntryC;
    function somtGetNextException: SOMTStructEntryC;
    function somtGetFirstArrayDimension: LongWord;
    function somtGetNextArrayDimension: LongWord;
    function somtIsArray(out size: LongInt): CORBABoolean;
    function somtIsPointer: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtIsVarargs: CORBABoolean read _get_somtIsVarargs;
    property somtOriginalMethod: SOMTMethodEntryC read _get_somtOriginalMethod;
    property somtOriginalClass: SOMTClassEntryC read _get_somtOriginalClass;
    property somtMethodGroup: SOMTEntryC read _get_somtMethodGroup;
    property somtIsPrivateMethod: CORBABoolean read _get_somtIsPrivateMethod;
    property somtIsOneway: CORBABoolean read _get_somtIsOneway;
    property somtArgCount: SmallInt read _get_somtArgCount;
    property somtContextArray: PCORBAString read _get_somtContextArray;
    property somtCReturnType: CORBAString read _get_somtCReturnType;
    property somtTypeObj: SOMTEntryC read _get_somtTypeObj;
    property somtPtrs: CORBAString read _get_somtPtrs;
    property somtArrayDimsString: CORBAString read _get_somtArrayDimsString;
    property somtSourceText: CORBAString read _get_somtSourceText;
    property somtType: CORBAString read _get_somtType;
    property somtVisibility: somtVisibilityT read _get_somtVisibility;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTModuleEntryC = class
  private
    function _get_somtOuterModule: SOMTModuleEntryC;
    function _get_somtModuleFile: CORBAString;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstModuleStruct: SOMTStructEntryC;
    function somtGetNextModuleStruct: SOMTStructEntryC;
    function somtGetFirstModuleTypedef: SOMTTypedefEntryC;
    function somtGetNextModuleTypedef: SOMTTypedefEntryC;
    function somtGetFirstModuleUnion: SOMTUnionEntryC;
    function somtGetNextModuleUnion: SOMTUnionEntryC;
    function somtGetFirstModuleEnum: SOMTEnumEntryC;
    function somtGetNextModuleEnum: SOMTEnumEntryC;
    function somtGetFirstModuleConstant: SOMTConstEntryC;
    function somtGetNextModuleConstant: SOMTConstEntryC;
    function somtGetFirstModuleSequence: SOMTSequenceEntryC;
    function somtGetNextModuleSequence: SOMTSequenceEntryC;
    function somtGetFirstInterface: SOMTClassEntryC;
    function somtGetNextInterface: SOMTClassEntryC;
    function somtGetFirstModule: SOMTModuleEntryC;
    function somtGetNextModule: SOMTModuleEntryC;
    function somtGetFirstModuleDef: SOMTEntryC;
    function somtGetNextModuleDef: SOMTEntryC;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtOuterModule: SOMTModuleEntryC read _get_somtOuterModule;
    property somtModuleFile: CORBAString read _get_somtModuleFile;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTParameterEntryC = class
  private
    function _get_somtParameterDirection: somtParameterDirectionT;
    function _get_somtIDLParameterDeclaration: CORBAString;
    function _get_somtCParameterDeclaration: CORBAString;
    function _get_somtTypeObj: SOMTEntryC;
    function _get_somtPtrs: CORBAString;
    function _get_somtArrayDimsString: CORBAString;
    function _get_somtSourceText: CORBAString;
    function _get_somtType: CORBAString;
    function _get_somtVisibility: somtVisibilityT;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstArrayDimension: LongWord;
    function somtGetNextArrayDimension: LongWord;
    function somtIsArray(out size: LongInt): CORBABoolean;
    function somtIsPointer: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtParameterDirection: somtParameterDirectionT read _get_somtParameterDirection;
    property somtIDLParameterDeclaration: CORBAString read _get_somtIDLParameterDeclaration;
    property somtCParameterDeclaration: CORBAString read _get_somtCParameterDeclaration;
    property somtTypeObj: SOMTEntryC read _get_somtTypeObj;
    property somtPtrs: CORBAString read _get_somtPtrs;
    property somtArrayDimsString: CORBAString read _get_somtArrayDimsString;
    property somtSourceText: CORBAString read _get_somtSourceText;
    property somtType: CORBAString read _get_somtType;
    property somtVisibility: somtVisibilityT read _get_somtVisibility;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTPassthruEntryC = class
  private
    function _get_somtPassthruBody: CORBAString;
    function _get_somtPassthruLanguage: CORBAString;
    function _get_somtPassthruTarget: CORBAString;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtIsBeforePassthru: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtPassthruBody: CORBAString read _get_somtPassthruBody;
    property somtPassthruLanguage: CORBAString read _get_somtPassthruLanguage;
    property somtPassthruTarget: CORBAString read _get_somtPassthruTarget;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTSequenceEntryC = class
  private
    function _get_somtSeqLength: LongInt;
    function _get_somtSeqType: SOMTEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtSeqLength: LongInt read _get_somtSeqLength;
    property somtSeqType: SOMTEntryC read _get_somtSeqType;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTStringEntryC = class
  private
    function _get_somtStringLength: LongInt;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtStringLength: LongInt read _get_somtStringLength;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTStructEntryC = class
  private
    function _get_somtStructClass: SOMTClassEntryC;
    function _get_somtIsException: CORBABoolean;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstMember: SOMTTypedefEntryC;
    function somtGetNextMember: SOMTTypedefEntryC;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtStructClass: SOMTClassEntryC read _get_somtStructClass;
    property somtIsException: CORBABoolean read _get_somtIsException;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTTypedefEntryC = class
  private
    function _get_somtTypedefType: SOMTEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstDeclarator: SOMTCommonEntryC;
    function somtGetNextDeclarator: SOMTCommonEntryC;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtTypedefType: SOMTEntryC read _get_somtTypedefType;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTTemplateOutputC = class
    { Found item: MAX_INPUT_LINE_LENGTH }
    { Found item: MAX_OUTPUT_LINE_LENGTH }
  private
    function _get_somtCommentStyle: somtCommentStyleT;
    procedure _set_somtCommentStyle(somtCommentStyle: somtCommentStyleT);
    function _get_somtLineLength: LongInt;
    procedure _set_somtLineLength(somtLineLength: LongInt);
    function _get_somtCommentNewline: CORBABoolean;
    procedure _set_somtCommentNewline(somtCommentNewline: CORBABoolean);
  public
    function somtGetSymbol(name: CORBAString): CORBAString;
    procedure somtSetSymbol(name: CORBAString; value: CORBAString);
    procedure somtSetSymbolCopyName(name: CORBAString; value: CORBAString);
    procedure somtSetSymbolCopyValue(name: CORBAString; value: CORBAString);
    procedure somtSetSymbolCopyBoth(name: CORBAString; value: CORBAString);
    function somtCheckSymbol(name: CORBAString): CORBABoolean;
    procedure somtSetOutputFile(var fp{: opaque SOM_FILE});
    procedure somto(tmplt: CORBAString);
    procedure somtOutputComment(comment: CORBAString);
    procedure somtOutputSection(sectionName: CORBAString);
    procedure somtAddSectionDefinitions(defString: CORBAString);
    procedure somtReadSectionDefinitions(var fp{: opaque SOM_FILE});
    function somtExpandSymbol(s: CORBAString; buf: CORBAString): CORBAString;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtCommentStyle: somtCommentStyleT read _get_somtCommentStyle write _set_somtCommentStyle;
    property somtLineLength: LongInt read _get_somtLineLength write _set_somtLineLength;
    property somtCommentNewline: CORBABoolean read _get_somtCommentNewline write _set_somtCommentNewline;
  end;

  PSOMTUnionEntryC_somtCaseEntry = ^SOMTUnionEntryC_somtCaseEntry;
  SOMTUnionEntryC = class
  private
    function _get_somtSwitchType: SOMTEntryC;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstCaseEntry: PSOMTUnionEntryC_somtCaseEntry;
    function somtGetNextCaseEntry: PSOMTUnionEntryC_somtCaseEntry;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtSwitchType: SOMTEntryC read _get_somtSwitchType;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMTUserDefinedTypeEntryC = class
  private
    function _get_somtOriginalTypedef: SOMTTypedefEntryC;
    function _get_somtBaseTypeObj: SOMTEntryC;
    function _get_somtTypeObj: SOMTEntryC;
    function _get_somtPtrs: CORBAString;
    function _get_somtArrayDimsString: CORBAString;
    function _get_somtSourceText: CORBAString;
    function _get_somtType: CORBAString;
    function _get_somtVisibility: somtVisibilityT;
    function _get_somtEntryName: CORBAString;
    procedure _set_somtEntryName(somtEntryName: CORBAString);
    function _get_somtElementType: LongWord;
    procedure _set_somtElementType(somtElementType: LongWord);
    function _get_somtElementTypeName: CORBAString;
    function _get_somtEntryComment: CORBAString;
    function _get_somtSourceLineNumber: LongWord;
    function _get_somtTypeCode: TypeCode;
    function _get_somtIsReference: CORBABoolean;
    function _get_somtIDLScopedName: CORBAString;
    function _get_somtCScopedName: CORBAString;
  public
    function somtGetFirstArrayDimension: LongWord;
    function somtGetNextArrayDimension: LongWord;
    function somtIsArray(out size: LongInt): CORBABoolean;
    function somtIsPointer: CORBABoolean;
    function somtGetModifierValue(modifierName: CORBAString): CORBAString;
    function somtGetFirstModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtGetNextModifier(var modifierName: CORBAString; var modifierValue: CORBAString): CORBABoolean;
    function somtFormatModifier(buffer: CORBAString; name: CORBAString; value: CORBAString): LongInt;
    function somtGetModifierList(buffer: CORBAString): LongInt;
    function somtSetSymbolsOnEntry(emitter: SOMTEmitC; prefix: CORBAString): LongInt;
    procedure somtSetEntryStruct(var es: Pointer);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somtOriginalTypedef: SOMTTypedefEntryC read _get_somtOriginalTypedef;
    property somtBaseTypeObj: SOMTEntryC read _get_somtBaseTypeObj;
    property somtTypeObj: SOMTEntryC read _get_somtTypeObj;
    property somtPtrs: CORBAString read _get_somtPtrs;
    property somtArrayDimsString: CORBAString read _get_somtArrayDimsString;
    property somtSourceText: CORBAString read _get_somtSourceText;
    property somtType: CORBAString read _get_somtType;
    property somtVisibility: somtVisibilityT read _get_somtVisibility;
    property somtEntryName: CORBAString read _get_somtEntryName write _set_somtEntryName;
    property somtElementType: LongWord read _get_somtElementType write _set_somtElementType;
    property somtElementTypeName: CORBAString read _get_somtElementTypeName;
    property somtEntryComment: CORBAString read _get_somtEntryComment;
    property somtSourceLineNumber: LongWord read _get_somtSourceLineNumber;
    property somtTypeCode: TypeCode read _get_somtTypeCode;
    property somtIsReference: CORBABoolean read _get_somtIsReference;
    property somtIDLScopedName: CORBAString read _get_somtIDLScopedName;
    property somtCScopedName: CORBAString read _get_somtCScopedName;
  end;

  SOMDServerMgr = class
  public
    function somdShutdownServer(server_alias: CORBAString): LongWord;
    function somdStartServer(server_alias: CORBAString): LongWord;
    function somdRestartServer(server_alias: CORBAString): LongWord;
    function somdListServer(server_alias: CORBAString): LongWord;
    function somdDisableServer(server_alias: CORBAString): LongWord;
    function somdEnableServer(server_alias: CORBAString): LongWord;
    function somdIsServerEnabled(impldef: ImplementationDef): CORBABoolean;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMESinkEvent = class
  public
    function somevGetEventSink: LongInt;
    procedure somevSetEventSink(sink: LongInt);
    function somevGetEventTime: LongWord;
    function somevGetEventType: LongWord;
    procedure somevSetEventTime(time: LongWord);
    procedure somevSetEventType(SOM_type: LongWord);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  PsomClassDataStructure = ^somClassDataStructure;
  SOMClass = class
  private
    function _get_somDataAlignment: LongInt;
    function _get_somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo;
    function _get_somDirectInitClasses: _IDL_Sequence_SOMClass;
    procedure _set_somDirectInitClasses(somDirectInitClasses: _IDL_Sequence_SOMClass);
    function _get_somClassAllocate: PPointer;
    function _get_somClassDeallocate: PPointer;
  public
    function somNew: SOMObject;
    function somNewNoInit: SOMObject;
    function somRenew(obj: Pointer): SOMObject;
    function somRenewNoInit(obj: Pointer): SOMObject;
    function somRenewNoZero(obj: Pointer): SOMObject;
    function somRenewNoInitNoZero(obj: Pointer): SOMObject;
    function somAllocate(size: LongInt): CORBAString;
    procedure somDeallocate(memptr: CORBAString);
    function somGetInstanceInitMask(out ctrl: Pointer): PByte;
    function somGetInstanceDestructionMask(out ctrl: Pointer): PByte;
    function somGetInstanceAssignmentMask(out ctrl: Pointer): PByte;
    procedure somInitClass(className: CORBAString; parentClass: SOMClass; dataSize: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    procedure somInitMIClass(inherit_vars: LongInt; className: CORBAString; parentClasses: _IDL_Sequence_SOMClass; dataSize: LongInt; dataAlignment: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    function somAddStaticMethod(methodId: somId; methodDescriptor: somId; method: Pointer; redispatchStub: Pointer; applyStub: Pointer): Pointer;
    procedure somAddDynamicMethod(methodId: somId; methodDescriptor: somId; method: Pointer; applyStub: Pointer);
    procedure somOverrideSMethod(methodId: somId; method: Pointer);
    procedure somClassReady;
    function somGetClassData: PsomClassDataStructure;
    procedure somSetClassData(cds: somClassDataStructure);
    function somGetClassMtab: PsomMethodTab;
    function somGetInstanceOffset: LongInt;
    function somGetInstancePartSize: LongInt;
    function somGetInstanceSize: LongInt;
    function somGetInstanceToken: Pointer;
    function somGetMemberToken(memberOffset: LongInt; instanceToken: Pointer): Pointer;
    function somGetMethodData(methodId: somId; out md: somMethodDataStruct): CORBABoolean;
    function somGetRdStub(methodId: somId): PPointer;
    function somGetMethodDescriptor(methodId: somId): somId;
    function somGetMethodIndex(id: somId): LongInt;
    function somGetMethodToken(methodId: somId): Pointer;
    function somGetName: CORBAString;
    function somGetNthMethodData(n: LongInt; out md: somMethodDataStruct): CORBABoolean;
    function somGetNthMethodInfo(n: LongInt; out descriptor: somId): somId;
    function somGetNumMethods: LongInt;
    function somGetNumStaticMethods: LongInt;
    function somGetParent: SOMClass;
    function somGetParents: _IDL_Sequence_SOMClass;
    function somGetPClsMtab: PsomMethodTabList;
    function somGetPClsMtabs: PsomMethodTabList;
    procedure somGetVersionNumbers(out majorVersion: LongInt; out minorVersion: LongInt);
    function somSetMethodDescriptor(methodId: somId; descriptor: somId): CORBABoolean;
    function somFindMethod(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindMethodOk(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindSMethod(methodId: somId): Pointer;
    function somFindSMethodOk(methodId: somId): Pointer;
    function somLookupMethod(methodId: somId): Pointer;
    function somCheckVersion(majorVersion: LongInt; minorVersion: LongInt): CORBABoolean;
    function somDescendedFrom(aClassObj: SOMClass): CORBABoolean;
    function somSupportsMethod(mId: somId): CORBABoolean;
    function somDefinedMethod(method: Pointer): Pointer;
    procedure somOverrideMtab;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somDataAlignment: LongInt read _get_somDataAlignment;
    property somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo read _get_somInstanceDataOffsets;
    property somDirectInitClasses: _IDL_Sequence_SOMClass read _get_somDirectInitClasses write _set_somDirectInitClasses;
    property somClassAllocate: PPointer read _get_somClassAllocate;
    property somClassDeallocate: PPointer read _get_somClassDeallocate;
  end;

  SOMMSingleInstance = class
  private
    function _get_somDataAlignment: LongInt;
    function _get_somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo;
    function _get_somDirectInitClasses: _IDL_Sequence_SOMClass;
    procedure _set_somDirectInitClasses(somDirectInitClasses: _IDL_Sequence_SOMClass);
    function _get_somClassAllocate: PPointer;
    function _get_somClassDeallocate: PPointer;
  public
    function sommGetSingleInstance: SOMObject;
    procedure sommFreeSingleInstance;
    function somNew: SOMObject;
    function somNewNoInit: SOMObject;
    function somRenew(obj: Pointer): SOMObject;
    function somRenewNoInit(obj: Pointer): SOMObject;
    function somRenewNoZero(obj: Pointer): SOMObject;
    function somRenewNoInitNoZero(obj: Pointer): SOMObject;
    function somAllocate(size: LongInt): CORBAString;
    procedure somDeallocate(memptr: CORBAString);
    function somGetInstanceInitMask(out ctrl: Pointer): PByte;
    function somGetInstanceDestructionMask(out ctrl: Pointer): PByte;
    function somGetInstanceAssignmentMask(out ctrl: Pointer): PByte;
    procedure somInitClass(className: CORBAString; parentClass: SOMClass; dataSize: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    procedure somInitMIClass(inherit_vars: LongInt; className: CORBAString; parentClasses: _IDL_Sequence_SOMClass; dataSize: LongInt; dataAlignment: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    function somAddStaticMethod(methodId: somId; methodDescriptor: somId; method: Pointer; redispatchStub: Pointer; applyStub: Pointer): Pointer;
    procedure somAddDynamicMethod(methodId: somId; methodDescriptor: somId; method: Pointer; applyStub: Pointer);
    procedure somOverrideSMethod(methodId: somId; method: Pointer);
    procedure somClassReady;
    function somGetClassData: PsomClassDataStructure;
    procedure somSetClassData(cds: somClassDataStructure);
    function somGetClassMtab: PsomMethodTab;
    function somGetInstanceOffset: LongInt;
    function somGetInstancePartSize: LongInt;
    function somGetInstanceSize: LongInt;
    function somGetInstanceToken: Pointer;
    function somGetMemberToken(memberOffset: LongInt; instanceToken: Pointer): Pointer;
    function somGetMethodData(methodId: somId; out md: somMethodDataStruct): CORBABoolean;
    function somGetRdStub(methodId: somId): PPointer;
    function somGetMethodDescriptor(methodId: somId): somId;
    function somGetMethodIndex(id: somId): LongInt;
    function somGetMethodToken(methodId: somId): Pointer;
    function somGetName: CORBAString;
    function somGetNthMethodData(n: LongInt; out md: somMethodDataStruct): CORBABoolean;
    function somGetNthMethodInfo(n: LongInt; out descriptor: somId): somId;
    function somGetNumMethods: LongInt;
    function somGetNumStaticMethods: LongInt;
    function somGetParent: SOMClass;
    function somGetParents: _IDL_Sequence_SOMClass;
    function somGetPClsMtab: PsomMethodTabList;
    function somGetPClsMtabs: PsomMethodTabList;
    procedure somGetVersionNumbers(out majorVersion: LongInt; out minorVersion: LongInt);
    function somSetMethodDescriptor(methodId: somId; descriptor: somId): CORBABoolean;
    function somFindMethod(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindMethodOk(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindSMethod(methodId: somId): Pointer;
    function somFindSMethodOk(methodId: somId): Pointer;
    function somLookupMethod(methodId: somId): Pointer;
    function somCheckVersion(majorVersion: LongInt; minorVersion: LongInt): CORBABoolean;
    function somDescendedFrom(aClassObj: SOMClass): CORBABoolean;
    function somSupportsMethod(mId: somId): CORBABoolean;
    function somDefinedMethod(method: Pointer): Pointer;
    procedure somOverrideMtab;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somDataAlignment: LongInt read _get_somDataAlignment;
    property somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo read _get_somInstanceDataOffsets;
    property somDirectInitClasses: _IDL_Sequence_SOMClass read _get_somDirectInitClasses write _set_somDirectInitClasses;
    property somClassAllocate: PPointer read _get_somClassAllocate;
    property somClassDeallocate: PPointer read _get_somClassDeallocate;
  end;

  SOMMBeforeAfter = class
  private
    function _get_somDataAlignment: LongInt;
    function _get_somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo;
    function _get_somDirectInitClasses: _IDL_Sequence_SOMClass;
    procedure _set_somDirectInitClasses(somDirectInitClasses: _IDL_Sequence_SOMClass);
    function _get_somClassAllocate: PPointer;
    function _get_somClassDeallocate: PPointer;
  public
    function sommBeforeMethod(SOM_object: SOMObject; methodId: somId; ap: va_list): CORBABoolean;
    procedure sommAfterMethod(SOM_object: SOMObject; methodId: somId; returnedvalue: Pointer; ap: va_list);
    function somNew: SOMObject;
    function somNewNoInit: SOMObject;
    function somRenew(obj: Pointer): SOMObject;
    function somRenewNoInit(obj: Pointer): SOMObject;
    function somRenewNoZero(obj: Pointer): SOMObject;
    function somRenewNoInitNoZero(obj: Pointer): SOMObject;
    function somAllocate(size: LongInt): CORBAString;
    procedure somDeallocate(memptr: CORBAString);
    function somGetInstanceInitMask(out ctrl: Pointer): PByte;
    function somGetInstanceDestructionMask(out ctrl: Pointer): PByte;
    function somGetInstanceAssignmentMask(out ctrl: Pointer): PByte;
    procedure somInitClass(className: CORBAString; parentClass: SOMClass; dataSize: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    procedure somInitMIClass(inherit_vars: LongInt; className: CORBAString; parentClasses: _IDL_Sequence_SOMClass; dataSize: LongInt; dataAlignment: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    function somAddStaticMethod(methodId: somId; methodDescriptor: somId; method: Pointer; redispatchStub: Pointer; applyStub: Pointer): Pointer;
    procedure somAddDynamicMethod(methodId: somId; methodDescriptor: somId; method: Pointer; applyStub: Pointer);
    procedure somOverrideSMethod(methodId: somId; method: Pointer);
    procedure somClassReady;
    function somGetClassData: PsomClassDataStructure;
    procedure somSetClassData(cds: somClassDataStructure);
    function somGetClassMtab: PsomMethodTab;
    function somGetInstanceOffset: LongInt;
    function somGetInstancePartSize: LongInt;
    function somGetInstanceSize: LongInt;
    function somGetInstanceToken: Pointer;
    function somGetMemberToken(memberOffset: LongInt; instanceToken: Pointer): Pointer;
    function somGetMethodData(methodId: somId; out md: somMethodDataStruct): CORBABoolean;
    function somGetRdStub(methodId: somId): PPointer;
    function somGetMethodDescriptor(methodId: somId): somId;
    function somGetMethodIndex(id: somId): LongInt;
    function somGetMethodToken(methodId: somId): Pointer;
    function somGetName: CORBAString;
    function somGetNthMethodData(n: LongInt; out md: somMethodDataStruct): CORBABoolean;
    function somGetNthMethodInfo(n: LongInt; out descriptor: somId): somId;
    function somGetNumMethods: LongInt;
    function somGetNumStaticMethods: LongInt;
    function somGetParent: SOMClass;
    function somGetParents: _IDL_Sequence_SOMClass;
    function somGetPClsMtab: PsomMethodTabList;
    function somGetPClsMtabs: PsomMethodTabList;
    procedure somGetVersionNumbers(out majorVersion: LongInt; out minorVersion: LongInt);
    function somSetMethodDescriptor(methodId: somId; descriptor: somId): CORBABoolean;
    function somFindMethod(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindMethodOk(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindSMethod(methodId: somId): Pointer;
    function somFindSMethodOk(methodId: somId): Pointer;
    function somLookupMethod(methodId: somId): Pointer;
    function somCheckVersion(majorVersion: LongInt; minorVersion: LongInt): CORBABoolean;
    function somDescendedFrom(aClassObj: SOMClass): CORBABoolean;
    function somSupportsMethod(mId: somId): CORBABoolean;
    function somDefinedMethod(method: Pointer): Pointer;
    procedure somOverrideMtab;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somDataAlignment: LongInt read _get_somDataAlignment;
    property somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo read _get_somInstanceDataOffsets;
    property somDirectInitClasses: _IDL_Sequence_SOMClass read _get_somDirectInitClasses write _set_somDirectInitClasses;
    property somClassAllocate: PPointer read _get_somClassAllocate;
    property somClassDeallocate: PPointer read _get_somClassDeallocate;
  end;

  PSOMClass = ^SOMClass;
  SOMClassMgr = class
  private
    function _get_somInterfaceRepository: Repository;
    procedure _set_somInterfaceRepository(somInterfaceRepository: Repository);
    function _get_somRegisteredClasses: _IDL_Sequence_SOMClass;
  public
    function somLoadClassFile(classId: somId; majorVersion: LongInt; minorVersion: LongInt; SOM_file: CORBAString): SOMClass;
    function somLocateClassFile(classId: somId; majorVersion: LongInt; minorVersion: LongInt): CORBAString;
    procedure somRegisterClass(classObj: SOMClass);
    procedure somRegisterClassLibrary(libraryName: CORBAString; libraryInitRtn: Pointer);
    procedure somUnregisterClassLibrary(libraryName: CORBAString);
    function somUnloadClassFile(classObj: SOMClass): LongInt;
    function somUnregisterClass(classObj: SOMClass): LongInt;
    procedure somBeginPersistentClasses;
    procedure somEndPersistentClasses;
    function somJoinAffinityGroup(newClass: SOMClass; affClass: SOMClass): CORBABoolean;
    function somGetInitFunction: CORBAString;
    function somGetRelatedClasses(classObj: SOMClass): PSOMClass;
    function somClassFromId(classId: somId): SOMClass;
    function somFindClass(classId: somId; majorVersion: LongInt; minorVersion: LongInt): SOMClass;
    function somFindClsInFile(classId: somId; majorVersion: LongInt; minorVersion: LongInt; SOM_file: CORBAString): SOMClass;
    procedure somMergeInto(targetObj: SOMObject);
    function somSubstituteClass(origClassName: CORBAString; newClassName: CORBAString): LongInt;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somInterfaceRepository: Repository read _get_somInterfaceRepository write _set_somInterfaceRepository;
    property somRegisteredClasses: _IDL_Sequence_SOMClass read _get_somRegisteredClasses;
  end;

  SOMDObject = class
  public
    function get_implementation: ImplementationDef;
    function get_interface: InterfaceDef;
    function is_nil: CORBABoolean;
    function is_SOM_ref: CORBABoolean;
    function is_constant: CORBABoolean;
    function is_proxy: CORBABoolean;
    function duplicate: SOMDObject;
    procedure release;
    function create_request(ctx: Context; operation: CORBAString; arg_list: NVList; var SOM_result: NamedValue; out request: Request; req_flags: LongWord): LongWord;
    function create_request_args(operation: CORBAString; out arg_list: NVList; out SOM_result: NamedValue): LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMDClientProxy = class
  public
    procedure somdTargetFree;
    function somdTargetGetClass: SOMClass;
    function somdTargetGetClassName: CORBAString;
    procedure somdProxyFree;
    function somdProxyGetClass: SOMClass;
    function somdProxyGetClassName: CORBAString;
    procedure somdReleaseResources;
    function get_implementation: ImplementationDef;
    function get_interface: InterfaceDef;
    function is_nil: CORBABoolean;
    function is_SOM_ref: CORBABoolean;
    function is_constant: CORBABoolean;
    function is_proxy: CORBABoolean;
    function duplicate: SOMDObject;
    procedure release;
    function create_request(ctx: Context; operation: CORBAString; arg_list: NVList; var SOM_result: NamedValue; out request: Request; req_flags: LongWord): LongWord;
    function create_request_args(operation: CORBAString; out arg_list: NVList; out SOM_result: NamedValue): LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMDMetaproxy = class
  private
    function _get_somDataAlignment: LongInt;
    function _get_somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo;
    function _get_somDirectInitClasses: _IDL_Sequence_SOMClass;
    procedure _set_somDirectInitClasses(somDirectInitClasses: _IDL_Sequence_SOMClass);
    function _get_somClassAllocate: PPointer;
    function _get_somClassDeallocate: PPointer;
  public
    function somNew: SOMObject;
    function somNewNoInit: SOMObject;
    function somRenew(obj: Pointer): SOMObject;
    function somRenewNoInit(obj: Pointer): SOMObject;
    function somRenewNoZero(obj: Pointer): SOMObject;
    function somRenewNoInitNoZero(obj: Pointer): SOMObject;
    function somAllocate(size: LongInt): CORBAString;
    procedure somDeallocate(memptr: CORBAString);
    function somGetInstanceInitMask(out ctrl: Pointer): PByte;
    function somGetInstanceDestructionMask(out ctrl: Pointer): PByte;
    function somGetInstanceAssignmentMask(out ctrl: Pointer): PByte;
    procedure somInitClass(className: CORBAString; parentClass: SOMClass; dataSize: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    procedure somInitMIClass(inherit_vars: LongInt; className: CORBAString; parentClasses: _IDL_Sequence_SOMClass; dataSize: LongInt; dataAlignment: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    function somAddStaticMethod(methodId: somId; methodDescriptor: somId; method: Pointer; redispatchStub: Pointer; applyStub: Pointer): Pointer;
    procedure somAddDynamicMethod(methodId: somId; methodDescriptor: somId; method: Pointer; applyStub: Pointer);
    procedure somOverrideSMethod(methodId: somId; method: Pointer);
    procedure somClassReady;
    function somGetClassData: PsomClassDataStructure;
    procedure somSetClassData(cds: somClassDataStructure);
    function somGetClassMtab: PsomMethodTab;
    function somGetInstanceOffset: LongInt;
    function somGetInstancePartSize: LongInt;
    function somGetInstanceSize: LongInt;
    function somGetInstanceToken: Pointer;
    function somGetMemberToken(memberOffset: LongInt; instanceToken: Pointer): Pointer;
    function somGetMethodData(methodId: somId; out md: somMethodDataStruct): CORBABoolean;
    function somGetRdStub(methodId: somId): PPointer;
    function somGetMethodDescriptor(methodId: somId): somId;
    function somGetMethodIndex(id: somId): LongInt;
    function somGetMethodToken(methodId: somId): Pointer;
    function somGetName: CORBAString;
    function somGetNthMethodData(n: LongInt; out md: somMethodDataStruct): CORBABoolean;
    function somGetNthMethodInfo(n: LongInt; out descriptor: somId): somId;
    function somGetNumMethods: LongInt;
    function somGetNumStaticMethods: LongInt;
    function somGetParent: SOMClass;
    function somGetParents: _IDL_Sequence_SOMClass;
    function somGetPClsMtab: PsomMethodTabList;
    function somGetPClsMtabs: PsomMethodTabList;
    procedure somGetVersionNumbers(out majorVersion: LongInt; out minorVersion: LongInt);
    function somSetMethodDescriptor(methodId: somId; descriptor: somId): CORBABoolean;
    function somFindMethod(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindMethodOk(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindSMethod(methodId: somId): Pointer;
    function somFindSMethodOk(methodId: somId): Pointer;
    function somLookupMethod(methodId: somId): Pointer;
    function somCheckVersion(majorVersion: LongInt; minorVersion: LongInt): CORBABoolean;
    function somDescendedFrom(aClassObj: SOMClass): CORBABoolean;
    function somSupportsMethod(mId: somId): CORBABoolean;
    function somDefinedMethod(method: Pointer): Pointer;
    procedure somOverrideMtab;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somDataAlignment: LongInt read _get_somDataAlignment;
    property somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo read _get_somInstanceDataOffsets;
    property somDirectInitClasses: _IDL_Sequence_SOMClass read _get_somDirectInitClasses write _set_somDirectInitClasses;
    property somClassAllocate: PPointer read _get_somClassAllocate;
    property somClassDeallocate: PPointer read _get_somClassDeallocate;
  end;

  P_IDL_ArrayOf_SOMDServer = ^_IDL_ArrayOf_SOMDServer;
  _IDL_Sequence_SOMDServer = record
    _maximum: LongWord;
    _length: LongWord;
    _buffer: P_IDL_ArrayOf_SOMDServer;
  end;
  SOMDObjectMgr = class
  private
    function _get_somd21somFree: CORBABoolean;
    procedure _set_somd21somFree(somd21somFree: CORBABoolean);
  public
    function somdFindServer(serverid: CORBAString): SOMDServer;
    function somdFindServerByName(servername: CORBAString): SOMDServer;
    function somdFindServersByClass(objclass: CORBAString): _IDL_Sequence_SOMDServer;
    function somdFindAnyServerByClass(objclass: CORBAString): SOMDServer;
    function somdNewObject(objclass: CORBAString; hints: CORBAString): SOMObject;
    function somdGetIdFromObject(obj: SOMObject): CORBAString;
    function somdGetObjectFromId(id: CORBAString): SOMObject;
    procedure somdReleaseObject(obj: SOMObject);
    procedure somdDestroyObject(obj: SOMObject);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somd21somFree: CORBABoolean read _get_somd21somFree write _set_somd21somFree;
  end;

  SOMDServer = class
  public
    function somdRefFromSOMObj(somobj: SOMObject): SOMDObject;
    function somdSOMObjFromRef(objref: SOMDObject): SOMObject;
    procedure somdDispatchMethod(somobj: SOMObject; out retValue: Pointer; methodId: somId; ap: va_list);
    function somdCreateObj(objclass: CORBAString; hints: CORBAString): SOMObject;
    procedure somdDeleteObj(somobj: SOMObject);
    function somdGetClassObj(objclass: CORBAString): SOMClass;
    function somdObjReferencesCached: CORBABoolean;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMUTId = class
  public
    procedure somutSetIdId(otherId: SOMUTId);
    function somutEqualsId(otherId: SOMUTId): CORBABoolean;
    function somutCompareId(otherId: SOMUTId): SmallInt;
    function somutHashId: LongWord;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  SOMOA = class
  public
    function execute_next_request(waitFlag: LongWord): LongWord;
    function execute_request_loop(waitFlag: LongWord): LongWord;
    procedure change_id(objref: SOMDObject; id: _IDL_Sequence_Byte);
    function create_constant(id: _IDL_Sequence_Byte; intf: InterfaceDef; impl: ImplementationDef): SOMDObject;
    function create_SOM_ref(somobj: SOMObject; impl: ImplementationDef): SOMDObject;
    function get_SOM_object(somref: SOMDObject): SOMObject;
    procedure activate_impl_failed(impl: ImplementationDef; rc: LongWord);
    procedure interrupt_server;
    function create(id: _IDL_Sequence_Byte; intf: InterfaceDef; impl: ImplementationDef): SOMDObject;
    procedure dispose(obj: SOMDObject);
    function get_id(obj: SOMDObject): _IDL_Sequence_Byte;
    function get_principal(obj: SOMDObject; req_ev: Environment): Principal;
    procedure set_exception(major: exception_type; userid: CORBAString; param: Pointer);
    procedure impl_is_ready(impl: ImplementationDef);
    procedure deactivate_impl(impl: ImplementationDef);
    procedure change_implementation(obj: SOMDObject; impl: ImplementationDef);
    procedure obj_is_ready(obj: SOMDObject; impl: ImplementationDef);
    procedure deactivate_obj(obj: SOMDObject);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  PSockets_hostent = Pointer{ opaque ^Sockets_hostent };
  PSockets_servent = Pointer{ opaque ^Sockets_servent };
  Sockets = class
  private
    function _get_serrno: LongInt;
    procedure _set_serrno(serrno: LongInt);
  public
    function somsAccept(s: LongInt; out name{: opaque Sockets_sockaddr}; out namelen: LongInt): LongInt;
    function somsBind(s: LongInt; var name{: opaque Sockets_sockaddr}; namelen: LongInt): LongInt;
    function somsConnect(s: LongInt; var name{: opaque Sockets_sockaddr}; namelen: LongInt): LongInt;
    function somsGethostbyaddr(addr: PShortInt; addrlen: LongInt; domain: LongInt): PSockets_hostent;
    function somsGethostbyname(name: CORBAString): PSockets_hostent;
    function somsGethostent: PSockets_hostent;
    function somsGethostid: LongWord;
    function somsGethostname(name: CORBAString; namelength: LongInt): LongInt;
    function somsGetpeername(s: LongInt; out name{: opaque Sockets_sockaddr}; out namelen: LongInt): LongInt;
    function somsGetservbyname(name: CORBAString; protocol: CORBAString): PSockets_servent;
    function somsGetsockname(s: LongInt; out name{: opaque Sockets_sockaddr}; out namelen: LongInt): LongInt;
    function somsGetsockopt(s: LongInt; level: LongInt; optname: LongInt; optval: PShortInt; out option: LongInt): LongInt;
    function somsHtonl(a: LongWord): LongWord;
    function somsHtons(a: Word): Word;
    function somsIoctl(s: LongInt; cmd: LongInt; data: PShortInt; length: LongInt): LongInt;
    function somsInet_addr(cp: CORBAString): LongWord;
    function somsInet_lnaof(addr: Sockets_in_addr): LongWord;
    function somsInet_makeaddr(net: LongWord; lna: LongWord): Sockets_in_addr;
    function somsInet_netof(addr: Sockets_in_addr): LongWord;
    function somsInet_network(cp: CORBAString): LongWord;
    function somsInet_ntoa(addr: Sockets_in_addr): CORBAString;
    function somsListen(s: LongInt; backlog: LongInt): LongInt;
    function somsNtohl(a: LongWord): LongWord;
    function somsNtohs(a: Word): Word;
    function somsReadv(s: LongInt; var iov{: opaque Sockets_iovec}; iovcnt: LongInt): LongInt;
    function somsRecv(s: LongInt; buf: PShortInt; len: LongInt; flags: LongInt): LongInt;
    function somsRecvfrom(s: LongInt; buf: PShortInt; len: LongInt; flags: LongInt; out name{: opaque Sockets_sockaddr}; out namelen: LongInt): LongInt;
    function somsRecvmsg(s: LongInt; var msg{: opaque Sockets_msghdr}; flags: LongInt): LongInt;
    function somsSelect(nfds: LongInt; var readfds{: opaque Sockets_fd_set}; var writefds{: opaque Sockets_fd_set}; var exceptfds{: opaque Sockets_fd_set}; var timeout{: opaque Sockets_timeval}): LongInt;
    function somsSend(s: LongInt; msg: PShortInt; len: LongInt; flags: LongInt): LongInt;
    function somsSendmsg(s: LongInt; var msg{: opaque Sockets_msghdr}; flags: LongInt): LongInt;
    function somsSendto(s: LongInt; var msg: ShortInt; len: LongInt; flags: LongInt; var to{: opaque Sockets_sockaddr}; tolen: LongInt): LongInt;
    function somsSetsockopt(s: LongInt; level: LongInt; optname: LongInt; optval: PShortInt; optlen: LongInt): LongInt;
    function somsShutdown(s: LongInt; how: LongInt): LongInt;
    function somsSocket(domain: LongInt; SOM_type: LongInt; protocol: LongInt): LongInt;
    function somsSoclose(s: LongInt): LongInt;
    function somsWritev(s: LongInt; var iov{: opaque Sockets_iovec}; iovcnt: LongInt): LongInt;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property serrno: LongInt read _get_serrno write _set_serrno;
  end;

  SOMStringTableC = class
  private
    function _get_somstTargetCapacity: LongWord;
    procedure _set_somstTargetCapacity(somstTargetCapacity: LongWord);
    function _get_somstAssociationsCount: LongWord;
  public
    function somstAssociate(key: CORBAString; value: CORBAString): SmallInt;
    function somstAssociateCopyKey(key: CORBAString; value: CORBAString): SmallInt;
    function somstAssociateCopyValue(key: CORBAString; value: CORBAString): SmallInt;
    function somstAssociateCopyBoth(key: CORBAString; value: CORBAString): SmallInt;
    function somstGetAssociation(key: CORBAString): CORBAString;
    function somstClearAssociation(key: CORBAString): CORBABoolean;
    function somstGetIthKey(i: LongWord): CORBAString;
    function somstGetIthValue(i: LongWord): CORBAString;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property somstTargetCapacity: LongWord read _get_somstTargetCapacity write _set_somstTargetCapacity;
    property somstAssociationsCount: LongWord read _get_somstAssociationsCount;
  end;

  SOMMTraced = class
  private
    function _get_sommTraceIsOn: CORBABoolean;
    procedure _set_sommTraceIsOn(sommTraceIsOn: CORBABoolean);
    function _get_somDataAlignment: LongInt;
    function _get_somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo;
    function _get_somDirectInitClasses: _IDL_Sequence_SOMClass;
    procedure _set_somDirectInitClasses(somDirectInitClasses: _IDL_Sequence_SOMClass);
    function _get_somClassAllocate: PPointer;
    function _get_somClassDeallocate: PPointer;
  public
    function sommBeforeMethod(SOM_object: SOMObject; methodId: somId; ap: va_list): CORBABoolean;
    procedure sommAfterMethod(SOM_object: SOMObject; methodId: somId; returnedvalue: Pointer; ap: va_list);
    function somNew: SOMObject;
    function somNewNoInit: SOMObject;
    function somRenew(obj: Pointer): SOMObject;
    function somRenewNoInit(obj: Pointer): SOMObject;
    function somRenewNoZero(obj: Pointer): SOMObject;
    function somRenewNoInitNoZero(obj: Pointer): SOMObject;
    function somAllocate(size: LongInt): CORBAString;
    procedure somDeallocate(memptr: CORBAString);
    function somGetInstanceInitMask(out ctrl: Pointer): PByte;
    function somGetInstanceDestructionMask(out ctrl: Pointer): PByte;
    function somGetInstanceAssignmentMask(out ctrl: Pointer): PByte;
    procedure somInitClass(className: CORBAString; parentClass: SOMClass; dataSize: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    procedure somInitMIClass(inherit_vars: LongInt; className: CORBAString; parentClasses: _IDL_Sequence_SOMClass; dataSize: LongInt; dataAlignment: LongInt; maxStaticMethods: LongInt; majorVersion: LongInt; minorVersion: LongInt);
    function somAddStaticMethod(methodId: somId; methodDescriptor: somId; method: Pointer; redispatchStub: Pointer; applyStub: Pointer): Pointer;
    procedure somAddDynamicMethod(methodId: somId; methodDescriptor: somId; method: Pointer; applyStub: Pointer);
    procedure somOverrideSMethod(methodId: somId; method: Pointer);
    procedure somClassReady;
    function somGetClassData: PsomClassDataStructure;
    procedure somSetClassData(cds: somClassDataStructure);
    function somGetClassMtab: PsomMethodTab;
    function somGetInstanceOffset: LongInt;
    function somGetInstancePartSize: LongInt;
    function somGetInstanceSize: LongInt;
    function somGetInstanceToken: Pointer;
    function somGetMemberToken(memberOffset: LongInt; instanceToken: Pointer): Pointer;
    function somGetMethodData(methodId: somId; out md: somMethodDataStruct): CORBABoolean;
    function somGetRdStub(methodId: somId): PPointer;
    function somGetMethodDescriptor(methodId: somId): somId;
    function somGetMethodIndex(id: somId): LongInt;
    function somGetMethodToken(methodId: somId): Pointer;
    function somGetName: CORBAString;
    function somGetNthMethodData(n: LongInt; out md: somMethodDataStruct): CORBABoolean;
    function somGetNthMethodInfo(n: LongInt; out descriptor: somId): somId;
    function somGetNumMethods: LongInt;
    function somGetNumStaticMethods: LongInt;
    function somGetParent: SOMClass;
    function somGetParents: _IDL_Sequence_SOMClass;
    function somGetPClsMtab: PsomMethodTabList;
    function somGetPClsMtabs: PsomMethodTabList;
    procedure somGetVersionNumbers(out majorVersion: LongInt; out minorVersion: LongInt);
    function somSetMethodDescriptor(methodId: somId; descriptor: somId): CORBABoolean;
    function somFindMethod(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindMethodOk(methodId: somId; out m: Pointer): CORBABoolean;
    function somFindSMethod(methodId: somId): Pointer;
    function somFindSMethodOk(methodId: somId): Pointer;
    function somLookupMethod(methodId: somId): Pointer;
    function somCheckVersion(majorVersion: LongInt; minorVersion: LongInt): CORBABoolean;
    function somDescendedFrom(aClassObj: SOMClass): CORBABoolean;
    function somSupportsMethod(mId: somId): CORBABoolean;
    function somDefinedMethod(method: Pointer): Pointer;
    procedure somOverrideMtab;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property sommTraceIsOn: CORBABoolean read _get_sommTraceIsOn write _set_sommTraceIsOn;
    property somDataAlignment: LongInt read _get_somDataAlignment;
    property somInstanceDataOffsets: _IDL_Sequence_SOMClass_somOffsetInfo read _get_somInstanceDataOffsets;
    property somDirectInitClasses: _IDL_Sequence_SOMClass read _get_somDirectInitClasses write _set_somDirectInitClasses;
    property somClassAllocate: PPointer read _get_somClassAllocate;
    property somClassDeallocate: PPointer read _get_somClassDeallocate;
  end;

  SOMETimerEvent = class
  public
    function somevGetEventInterval: LongInt;
    procedure somevSetEventInterval(interval: LongInt);
    function somevGetEventTime: LongWord;
    function somevGetEventType: LongWord;
    procedure somevSetEventTime(time: LongWord);
    procedure somevSetEventType(SOM_type: LongWord);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;

  TSPortability_Sender = SOMObject { unresolved class name };
  TSPortability_Receiver = SOMObject { unresolved class name };
  TSIdentification = class
  private
    function _get_sender: TSPortability_Sender;
    function _get_receiver: TSPortability_Receiver;
  public
    procedure identify_sender(sender: TSPortability_Sender);
    procedure identify_receiver(receiver: TSPortability_Receiver);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property sender: TSPortability_Sender read _get_sender;
    property receiver: TSPortability_Receiver read _get_receiver;
  end;

  TypeDef = class
  private
    function _get_type: TypeCode;
    procedure _set_type(SOM_type: TypeCode);
    function _get_name: CORBAString;
    procedure _set_name(name: CORBAString);
    function _get_id: CORBAString;
    procedure _set_id(id: CORBAString);
    function _get_defined_in: CORBAString;
    procedure _set_defined_in(defined_in: CORBAString);
    function _get_somModifiers: _IDL_Sequence_somModifier;
    procedure _set_somModifiers(somModifiers: _IDL_Sequence_somModifier);
  public
    function within: _IDL_Sequence_Container;
    function describe: Contained_Description;
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
    property SOM_type: TypeCode read _get_type write _set_type;
    property name: CORBAString read _get_name write _set_name;
    property id: CORBAString read _get_id write _set_id;
    property defined_in: CORBAString read _get_defined_in write _set_defined_in;
    property somModifiers: _IDL_Sequence_somModifier read _get_somModifiers write _set_somModifiers;
  end;

  SOMEWorkProcEvent = class
  public
    function somevGetEventTime: LongWord;
    function somevGetEventType: LongWord;
    procedure somevSetEventTime(time: LongWord);
    procedure somevSetEventType(SOM_type: LongWord);
    procedure somDefaultInit(var ctrl: Pointer);
    procedure somDestruct(doFree: Byte; var ctrl: Pointer);
    procedure somDefaultCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somDefaultConstCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    procedure somDefaultConstVCopyInit(var ctrl: Pointer; fromObj: SOMObject);
    function somDefaultConstAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    function somDefaultConstVAssign(var ctrl: Pointer; fromObj: SOMObject): SOMObject;
    procedure somInit;
    procedure somFree;
    procedure somUninit;
    function somGetClass: SOMClass;
    function somGetClassName: CORBAString;
    function somGetSize: LongInt;
    function somIsA(aClassObj: SOMClass): CORBABoolean;
    function somIsInstanceOf(aClassObj: SOMClass): CORBABoolean;
    function somRespondsTo(mId: somId): CORBABoolean;
    function somDispatch(out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somClassDispatch(clsObj: SOMClass; out retValue: Pointer; methodId: somId; ap: va_list): CORBABoolean;
    function somCastObj(cls: SOMClass): CORBABoolean;
    function somResetObj: CORBABoolean;
    function somPrintSelf: SOMObject;
    procedure somDumpSelf(level: LongInt);
    procedure somDumpSelfInt(level: LongInt);
  end;
  { Arrays }
  _IDL_ArrayOf_SOMObject = packed array[0 .. (MaxLongInt div (Abs(SizeOf(SOMObject) - 1) + 1)) - 1] of SOMObject;
  _IDL_ArrayOf_Byte = packed array[0 .. (MaxLongInt div (Abs(SizeOf(Byte) - 1) + 1)) - 1] of Byte;
  _IDL_ArrayOf_SOMObject_somObjectOffset = packed array[0 .. (MaxLongInt div (Abs(SizeOf(SOMObject_somObjectOffset) - 1) + 1)) - 1] of SOMObject_somObjectOffset;
  _IDL_ArrayOf_Pointer = packed array[0 .. (MaxLongInt div (Abs(SizeOf(Pointer) - 1) + 1)) - 1] of Pointer;
  _IDL_ArrayOf_SOMClass = packed array[0 .. (MaxLongInt div (Abs(SizeOf(SOMClass) - 1) + 1)) - 1] of SOMClass;
  _IDL_ArrayOf_SOMClass_somOffsetInfo = packed array[0 .. (MaxLongInt div (Abs(SizeOf(SOMClass_somOffsetInfo) - 1) + 1)) - 1] of SOMClass_somOffsetInfo;
  _IDL_ArrayOf_somId = packed array[0 .. (MaxLongInt div (Abs(SizeOf(somId) - 1) + 1)) - 1] of somId;
  _IDL_ArrayOf_CORBAString = packed array[0 .. (MaxLongInt div (Abs(SizeOf(CORBAString) - 1) + 1)) - 1] of CORBAString;
  _IDL_ArrayOf_ParameterDef_ParameterDescription = packed array[0 .. (MaxLongInt div (Abs(SizeOf(ParameterDef_ParameterDescription) - 1) + 1)) - 1] of ParameterDef_ParameterDescription;
  _IDL_ArrayOf_ExceptionDef_ExceptionDescription = packed array[0 .. (MaxLongInt div (Abs(SizeOf(ExceptionDef_ExceptionDescription) - 1) + 1)) - 1] of ExceptionDef_ExceptionDescription;
  _IDL_ArrayOf_OperationDef_OperationDescription = packed array[0 .. (MaxLongInt div (Abs(SizeOf(OperationDef_OperationDescription) - 1) + 1)) - 1] of OperationDef_OperationDescription;
  _IDL_ArrayOf_AttributeDef_AttributeDescription = packed array[0 .. (MaxLongInt div (Abs(SizeOf(AttributeDef_AttributeDescription) - 1) + 1)) - 1] of AttributeDef_AttributeDescription;
  _IDL_ArrayOf_somModifier = packed array[0 .. (MaxLongInt div (Abs(SizeOf(somModifier) - 1) + 1)) - 1] of somModifier;
  _IDL_ArrayOf_Container = packed array[0 .. (MaxLongInt div (Abs(SizeOf(Container) - 1) + 1)) - 1] of Container;
  _IDL_ArrayOf_Contained = packed array[0 .. (MaxLongInt div (Abs(SizeOf(Contained) - 1) + 1)) - 1] of Contained;
  _IDL_ArrayOf_Container_ContainerDescription = packed array[0 .. (MaxLongInt div (Abs(SizeOf(Container_ContainerDescription) - 1) + 1)) - 1] of Container_ContainerDescription;
  _IDL_ArrayOf_ImplementationDef = packed array[0 .. (MaxLongInt div (Abs(SizeOf(ImplementationDef) - 1) + 1)) - 1] of ImplementationDef;
  _IDL_ArrayOf_SOMDServer = packed array[0 .. (MaxLongInt div (Abs(SizeOf(SOMDServer) - 1) + 1)) - 1] of SOMDServer;

{ Others }


implementation

end.
