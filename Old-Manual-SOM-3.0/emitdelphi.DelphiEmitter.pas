unit emitdelphi.DelphiEmitter;

interface

{$WARN UNSAFE_TYPE OFF}
{$WARN UNSAFE_CODE OFF}

uses
  SOM.DelphiFeatures, SOM.Thin, SOM.Thin.RTL,
  SOM.Thin.Emitter, SOM.Thin.TypeCodes;

{$INCLUDE 'SOM.DelphiFeatures.inc'}

// #include "delphi.c"

(* @(#) somc/gen_c.efs 2.5 9/1/94 19:33:10 [12/22/96 21:11:22] *)

(*
 *   COMPONENT_NAME: some
 *
 *   ORIGINS: 27
 *
 *
 *   10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *)

(*
 *         File:    delphi.c
 *       Author:    SOMObjects Emitter Framework.
 *     Contents:    Generic framework implementation for DelphiEmitter.
 *         Date:    Sun Jan 11 00:51:12 2015.
 *)

// #include "delphi.ih"

(*
 * This file was generated by the SOM Compiler.
 * FileName: delphi.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.19
 *     SOM Emitter emitih.dll: 2.77.1.179
 *)

(*
 *         File:    DelphiEmitter.idl
 *       Author:    SOMObjects Emitter Framework
 *     Contents:    Generic framework logic class for DelphiEmitter.
 *         Date:    Sun Jan 11 00:51:12 2015.
 *)

// #include "delphi.h"

(*
 * This file was generated by the SOM Compiler.
 * FileName: delphi.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.19
 *     SOM Emitter emith.dll: 2.31.1.64
 *)

(*
 *         File:    DelphiEmitter.idl
 *       Author:    SOMObjects Emitter Framework
 *     Contents:    Generic framework logic class for DelphiEmitter.
 *         Date:    Sun Jan 11 00:51:12 2015.
 *)

(*
 * Define the class name as an object type
 *)
type
  DelphiEmitter = SOMObject;

const DelphiEmitter_MajorVersion = 1;
const DelphiEmitter_MinorVersion = 1;

(*
 * Declare the class creation procedure
 *)
function DelphiEmitterNewClass(
    somtmajorVersion: integer4 = DelphiEmitter_MajorVersion;
		somtminorVersion: integer4 = DelphiEmitter_MinorVersion): SOMClass; stdcall;

(*
 * Declare the ABI 2 ClassData structure
 *)
type DelphiEmitterClassDataStructure = record
	classObject: SOMClass;
end;
// DelphiEmitterClassData

(*
 * Declare the ABI 2 CClassData structure
 *)
type DelphiEmitterCClassDataStructure = record
	parentMtab: somMethodTabs;
	instanceDataToken: somDToken;
end;
// DelphiEmitterCClassData

(*
 * Class Object and Method Token Macros
 *)
function _SOMCLASS_DelphiEmitter: SOMClass; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}

(*
 * New and Renew macros for DelphiEmitter
 *)
function DelphiEmitterNew: DelphiEmitter;
function DelphiEmitterRenew(buf: Pointer): DelphiEmitter;

// #include "delphi.ih"

(*
 * -- Instance data
 *)
type
  DelphiEmitterData = record
    dummy: LongInt;
  end;
DelphiEmitterDataPtr = ^DelphiEmitterData;

(*
 * -- GetData macro
 *)
type somTP_DelphiEmitter_DataThunk = function(somSelf: DelphiEmitter): DelphiEmitterDataPtr; stdcall;
somTD_DelphiEmitter_DataThunk = somTP_DelphiEmitter_DataThunk;

function DelphiEmitterGetData(somSelf: DelphiEmitter): DelphiEmitterDataPtr; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}

(*
 * -- Primary Implementation File Support
 *)

// #ifndef DelphiEmitterMethodDebug
//    #define DelphiEmitterMethodDebug(c,m) SOMMethodDebug(c,m)
// #endif  /* DelphiEmitterMethodDebug */

procedure __somC_DelphiEmitter_classInit(somSelf: SOMClass); stdcall;


(*
 * Init ClassData Structures
 *)
var
  DelphiEmitterClassData: DelphiEmitterClassDataStructure = (classObject: nil);
  DelphiEmitterCClassData: DelphiEmitterCClassDataStructure = (parentMTab: nil; instanceDataToken: nil);


(*
 * Identifiers
 *)
const
  __somC_Strings_DelphiEmitter0: array[0 .. 13] of AnsiChar = 'DelphiEmitter'; (* class name *)
  __somC_Strings_DelphiEmitter1: array[0 .. 9] of AnsiChar = 'SOMTEmitC'; (* parent name *)
  __somC_Strings_DelphiEmitter2: array[0 .. 20] of AnsiChar = 'somtGenerateSections'; (* overridden method name *)
var
  __somC_DelphiEmitter_regIdsArray: array[0 .. 2] of PAnsiChar = (
	@__somC_Strings_DelphiEmitter0,
	@__somC_Strings_DelphiEmitter1,
	@__somC_Strings_DelphiEmitter2
);
const __somC_DelphiEmitter_regIds_somtGenerateSections = 2;


(*
 * Overridden method: somtGenerateSections
 *)
function somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; stdcall;
var
  DelphiEmitter_parent_SOMTEmitC_somtGenerateSections_resolved: somMethodProc;
function DelphiEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
var
  DelphiEmitter_pcall_somtGenerateSections_resolved: somMethodProc;
function DelphiEmitter_pcall_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
function DelphiEmitter_pcallResolve_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; stdcall;


(*
 * Functions for attributes.
 *)

(*
 * Special Method Support
 *)

(*
 * -- Routines and Structures to create the class object
 *)
var
  __somC_DelphiEmitter_parentArray: array[0 .. 0] of PSOMClass = (
	nil
);
  __somC_DelphiEmitter_parentMtabs: array[0 .. 0] of Pointer;

__somC_DelphiEmitter_overridesArray: array[0 .. 0] of somOverrideMethod_t2 = (
(
  methodId: @(__somC_DelphiEmitter_regIdsArray[__somC_DelphiEmitter_regIds_somtGenerateSections]);
  pcall: nil; // somMethodPtrPtr(@@DelphiEmitter_pcall_somtGenerateSections_resolved); // assigned at initialization
  pcallResolve: nil; // somMethodPtr(@DelphiEmitter_pcallResolve_somtGenerateSections); // assinged at initialization
  methodProc: nil; // somMethodPtr(@somtGenerateSections) // assigned at initialization
)
);

__somC_DelphiEmitter_classVars1: somClassVars1 = (
	layoutVersion: 1;		(* layoutVersion *)
	extension: nil;	(* extension *)
	dataSize: SizeOf(DelphiEmitterData);	(* dataSize *)
	dataAlignment: 4;		(* type code dataAlignment *)
	classAllocate: nil;	(* classAllocate *)
	classDeallocate: nil	(* classDeallocate *)
);

__somC_DelphiEmitter_resolvedMTokens: DelphiEmitterClassDataStructure;

__somC_DelphiEmitter_CIB_unsharedClassVariablesPtr: Pointer = nil;
// som3ClassInfoStruct __somC_DelphiEmitter_ClassInfo; (* C forward reference *)

var
DelphiEmitter_ClassInitBlock: SOM_CIB = (
	layoutVersion: 1;	(* layoutVersion *)
	classVars1: @__somC_DelphiEmitter_classVars1;
	unsharedVars: @__somC_DelphiEmitter_CIB_unsharedClassVariablesPtr;	(* unsharedVars *)
	majorVersion: DelphiEmitter_MajorVersion;
	minorVersion: DelphiEmitter_MinorVersion;
	constFlags: $40004;	(* constFlags *)
	inheritVars: $FFFFFFFF;	(* inheritVars *)
	classMeta: nil;	(* classMeta *)
	classInit: nil; // somMethodPtr(@__somC_DelphiEmitter_classInit);	(* classInit *) // assigned on initialization
	classUninit: nil;	(* classUninit *)
	legacyInit: nil;	(* legacyInit *)
	legacyUninit: nil;	(* legacyUninit *)
	udaAssign: nil;	(* udaAssign *)
	udaConstAssign: nil;	(* udaConstAssign *)
	protectedDataOffset: 0;	(* protectedDataOffset *)
	numEmbeddedObjs: 0;	(* numEmbeddedObjs *)
	embeddedObjs: nil;	(* embeddedObjs *)
	numRegIds: 3;	(* numRegIds *)
	regIds: @(__somC_DelphiEmitter_regIdsArray[0]);	(* regIds *)
	numClassDataEntries: (SizeOf(DelphiEmitterClassDataStructure) - SizeOf(SOMClass)) div SizeOf(somMToken);	(* numClassDataEntries *)
	somClassData: @DelphiEmitterClassData;
	somCClassData: @DelphiEmitterCClassData;
	som3ClassInfo: nil; // @__somC_DelphiEmitter_ClassInfo; // assigned on initialization
	numParents: 1;	(* numParents *)
	parents: @(__somC_DelphiEmitter_parentArray[0]);	(* parents *)
	numDirectInitClasses: 1;	(* numDirectInitClasses *)
	directInitClasses: @(__somC_DelphiEmitter_parentArray[0]);	(* directInitClasses *)
	numNewInitializers: 0;	(* numNewInitializers *)
	newInitializerSymbols: nil;	(* newInitializerSymbols *)
	numOvInitializers: 0;	(* numOvInitializers *)
	ovInitializerSymbols: nil;	(* ovInitializerSymbols *)
	specialOverrides: nil;	(* special overrides *)
	maxNDMethods: 0;	(* maxNDMethods *)
	newNDMethods: nil;	(* newNDMethods *)
	numOverrides: 1;	(* numOverrides *)
	overrides: @(__somC_DelphiEmitter_overridesArray[0]);	(* overrides *)
	numInheritedSelections: 0;	(* numInheritedSelections *)
	inheritedSelections: nil;	(* inheritedSelections *)
	numMigratedMethods: 0;	(* numMigratedMethods *)
	migratedMethods: nil 	(* migrated methods *)
);	(* CIB *)

__somC_DelphiEmitter_ClassDetails: som3ClassDetails = (
	mtab: nil;	(* mtab *)
	next: @(__somC_DelphiEmitter_parentMtabs[0]);	(* parentMtabs *)
	cib: @DelphiEmitter_ClassInitBlock;	(* CIB pointer *)
	somRenewNoInitNoZeroThunk: nil;	(* somRenewNoInitNoZeroThunk *)
	instanceSize: 0;	(* instanceSize *)
	resolvedInits: nil;	(* resolvedInits *)
	resolvedMTokens: @__somC_DelphiEmitter_resolvedMTokens;	(* resolvedMTokens *)
	initCtrl: (mask: nil; info: nil; infoSize: 0; ctrlInfo: nil);	(* initCtrl *)
	destructCtrl: (mask: nil; info: nil; infoSize: 0; ctrlInfo: nil);	(* destructCtrl *)
	assignCtrl: (mask: nil; info: nil; infoSize: 0; ctrlInfo: nil);	(* assignCtrl *)
	layoutVersion: 1;	(* layoutVersion *)
	extension: nil;	(* extension *)
	publicDataToken: nil;	(* publicDataToken *)
	protectedDataToken: nil;	(* protectedDataToken *)
  instanceAlignment: 0
);
__somC_DelphiEmitter_ClassInfo: som3ClassInfoStruct = (
	classObject: nil;	(* classObject *)
	classDetails: @__somC_DelphiEmitter_ClassDetails	(* class details *)
);

implementation

function _SOMCLASS_DelphiEmitter: SOMClass; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
begin
  Result := DelphiEmitterClassData.classObject;
end;

function DelphiEmitterNew: DelphiEmitter;
var
  cls: SOMClass;
begin
  cls := _SOMCLASS_DelphiEmitter;
  if not Assigned(cls) then cls := DelphiEmitterNewClass;
  Result := SOMClass_somNew(cls);
end;

function DelphiEmitterRenew(buf: Pointer): DelphiEmitter;
var
  cls: SOMClass;
begin
  cls := _SOMCLASS_DelphiEmitter;
  if not Assigned(cls) then cls := DelphiEmitterNewClass;
	Result := SOMClass_somRenew(cls, buf);
end;

function DelphiEmitterGetData(somSelf: DelphiEmitter): DelphiEmitterDataPtr; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
begin
  Result := somTD_DelphiEmitter_DataThunk(DelphiEmitterCClassData.instanceDataToken)(somSelf);
end;

function DelphiEmitter_parent_SOMTEmitC_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
begin
  Result := somTD_SOMTEmitC_somtGenerateSections
    (DelphiEmitter_parent_SOMTEmitC_somtGenerateSections_resolved)(somSelf);
end;

function DelphiEmitter_pcall_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; {$IFDEF DELPHI_HAS_INLINE} inline; {$ENDIF}
begin
  Result :=
   somTD_SOMTEmitC_somtGenerateSections(DelphiEmitter_pcall_somtGenerateSections_resolved)(somSelf);
end;

function DelphiEmitter_pcallResolve_somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; stdcall;
begin
  Result := somTD_SOMTEmitC_somtGenerateSections
    (somPCallResolve(somSelf, _SOMCLASS_DelphiEmitter,
    SOMTEmitCClassData.somtGenerateSections))(somSelf);
end;

procedure __somC_DelphiEmitter_classInit(somSelf: SOMClass); stdcall;
begin
  // SOM_IgnoreWarning(somSelf);
  DelphiEmitter_parent_SOMTEmitC_somtGenerateSections_resolved :=
	  somParentNumResolve(DelphiEmitterCClassData.parentMtab, 1, SOMTEmitCClassData.somtGenerateSections);
end;

function DelphiEmitterNewClass(
    somtmajorVersion: integer4 = DelphiEmitter_MajorVersion;
		somtminorVersion: integer4 = DelphiEmitter_MinorVersion): SOMClass; stdcall;
begin
  if Assigned(_SOMCLASS_DelphiEmitter()) and
     SOMClass_somCheckVersion(_SOMCLASS_DelphiEmitter, somtmajorVersion, somtminorVersion) then
  begin
    Result := _SOMCLASS_DelphiEmitter;
    Exit;
  end;
  __somC_DelphiEmitter_parentArray[0] := PSOMClass(@(SOMTEmitCClassData.classObject));
   (* require parents *)
   if not Assigned(_SOMCLASS_SOMTEmitC()) then
     SOMTEmitCNewClass(SOMTEmitC_MajorVersion, SOMTEmitC_MinorVersion);
   (* return new class *)
   Result := somBuildClass2(@DelphiEmitter_ClassInitBlock, somtmajorVersion, somtminorVersion);
end;

function somtGenerateSections(somSelf: DelphiEmitter): CORBABoolean; stdcall;
var
  cls: SOMTClassEntryC;
  template: SOMTTemplateOutputC;
begin
  (* DelphiEmitterData *somThis = DelphiEmitterGetData(somSelf); *)
  cls := SOMTEmitC__get_somtTargetClass(somSelf);
  template := SOMTEmitC__get_somtTemplate(somSelf);
  // DelphiEmitterMethodDebug("DelphiEmitter", "somtGenerateSections");

  (*
   * Setup symbols that are common to the whole file
   *)
  SOMTEmitC_somtFileSymbols(somSelf);

  SOMTEmitC_somtEmitProlog(somSelf);

  if Assigned(cls) then
  begin
    SOMTEmitC_somtScanBases(somSelf,
                            'somtEmitBaseIncludesProlog',
                            'somtEmitBaseIncludes',
                            'somtEmitBaseIncludesEpilog');

    SOMTEmitC_somtEmitMetaInclude(somSelf);

    SOMTEmitC_somtEmitClass(somSelf);

    SOMTEmitC_somtScanBases(somSelf,
                            'somtEmitBaseProlog',
                            'somtEmitBase',
                            'somtEmitBaseEpilog');

    SOMTEmitC_somtEmitMeta(somSelf);
  end;
  SOMTEmitC_somtScanConstants(somSelf, 'somtEmitConstantProlog',
                              'somtEmitConstant', 'somtEmitConstantEpilog');

  SOMTEmitC_somtScanTypedefs(somSelf, 'somtEmitTypedefProlog',
                             'somtEmitTypedef', 'somtEmitTypedefEpilog');

  SOMTEmitC_somtScanStructs(somSelf, 'somtEmitStructProlog',
                            'somtEmitStruct', 'somtEmitStructEpilog');

  SOMTEmitC_somtScanUnions(somSelf, 'somtEmitUnionProlog',
                           'somtEmitUnion', 'somtEmitUnionEpilog');

  SOMTEmitC_somtScanEnums(somSelf, 'somtEmitEnumProlog',
                          'somtEmitEnum', 'somtEmitEnumEpilog');

  if Assigned(cls) then
  begin
    SOMTEmitC_somtScanAttributes(somSelf, 'somtEmitAttributeProlog',
                                 'somtEmitAttribute', 'somtEmitAttributeEpilog');

    SOMTEmitC_somtScanMethods(somSelf,
                              'somtImplemented',
                              'somtEmitMethodsProlog',
                              'somtEmitMethod',
                              'somtEmitMethodsEpilog',
                              False);

    SOMTEmitC_somtEmitRelease(somSelf);

    SOMTEmitC_somtScanPassthru(somSelf, True,
                               'somtEmitPassthruProlog',
                               'somtEmitPassthru',
                               'somtEmitPassthruEpilog');

    SOMTEmitC_somtScanPassthru(somSelf, False,
                               'somtEmitPassthruProlog',
                               'somtEmitPassthru',
                               'somtEmitPassthruEpilog');

    SOMTEmitC_somtScanData(somSelf,
                           'somtEmitDataProlog',
                           'somtEmitData',
                           'somtEmitDataEpilog');
  end;

  if Assigned(SOMTEmitC__get_somtTargetModule(somSelf)) then
  begin

      SOMTEmitC_somtScanInterfaces(somSelf, 'somtEmitInterfaceProlog',
                                   'somtEmitInterface', 'somtEmitInterfaceEpilog');

      SOMTEmitC_somtScanModules(somSelf, 'somtEmitModuleProlog',
                                'somtEmitModule', 'somtEmitModuleEpilog');
  end;

  SOMTEmitC_somtEmitEpilog(somSelf);

  Result := True;
end;

initialization
  __somC_DelphiEmitter_overridesArray[0].pcall := somMethodPtrPtr(@@DelphiEmitter_pcall_somtGenerateSections_resolved);
  __somC_DelphiEmitter_overridesArray[0].pcallResolve := somMethodPtr(@DelphiEmitter_pcallResolve_somtGenerateSections);
  __somC_DelphiEmitter_overridesArray[0].methodProc := somMethodPtr(@somtGenerateSections);
  DelphiEmitter_ClassInitBlock.classInit := somMethodPtr(@__somC_DelphiEmitter_classInit);
  DelphiEmitter_ClassInitBlock.som3ClassInfo := @__somC_DelphiEmitter_ClassInfo;
end.
