:copyrightS
/* @(#) somc/gen_temp.efw 2.5 9/2/94 14:17:15 [12/22/96 21:11:21] */

/*
 *   COMPONENT_NAME: some
 *
 *   ORIGINS: 27
 *
 *
 *   10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

:prologS
Section: prologS

  timeStamp = "<timeStamp>"

:baseIncludesPrologS
Section: baseIncludesPrologS

:baseIncludesS
Section: baseIncludesS

  baseName = "<baseName>"
  baseIDLScopedName = "<baseIDLScopedName>"
  baseCScopedName = "<baseCScopedName>"
  baseComment = "<-- baseComment>"
  baseInclude = "<baseInclude>"
  baseLineNumber = "<baseLineNumber>"
  baseMajorVersion = "<baseMajorVersion>"
  baseMinorVersion = "<baseMinorVersion>"
  baseMods = "<baseMods, ...>"
  baseReleaseOrder = "<baseReleaseOrder, ...>"
  baseSourceFile = "<baseSourceFile>"
  baseSourceFileStem = "<baseSourceFileStem>"

:baseIncludesEpilogS
Section: baseIncludesEpilogS

:metaIncludeS
Section: metaIncludesS

  metaName = "<metaName>"
  metaIDLScopedName = "<metaIDLScopedName>"
  metaCScopedName = "<metaCScopedName>"
  metaComment = "<-- metaComment>"
  metaInclude = "<metaInclude>"
  metaLineNumber = "<metaLineNumber>"
  metaMajorVersion = "<metaMajorVersion>"
  metaMinorVersion = "<metaMinorVersion>"
  metaMods = "<metaMods, ...>"
  metaReleaseOrder = "<metaReleaseOrder, ...>"
  metaSourceFile = "<metaSourceFile>"
  metaSourceFileStem = "<metaSourceFileStem>"

:classS
Section: classS

  className = "<className>"
  classIDLScopedName = "<classIDLScopedName>"
  classCScopedName = "<classCScopedName>"
  classComment = "<-- classComment>"
  classInclude = "<classInclude>"
  classLineNumber = "<classLineNumber>"
  classMods = "<classMods, ...>"
  classMajorVersion = "<classMajorVersion>"
  classMinorVersion = "<classMinorVersion>"
  classReleaseOrder = "<classReleaseOrder, ...>"
  classSourceFile = "<classSourceFile>"
  classSourceFileStem = "<classSourceFileStem>"

:basePrologS
Section: basePrologS

:baseS
Section: baseS

  baseName = "<baseName>"
  baseIDLScopedName = "<baseIDLScopedName>"
  baseCScopedName = "<baseCScopedName>"
  baseComment = "<-- baseComment>"
  baseInclude = "<baseInclude>"
  baseLineNumber = "<baseLineNumber>"
  baseMajorVersion = "<baseMajorVersion>"
  baseMinorVersion = "<baseMinorVersion>"
  baseMods = "<baseMods, ...>"
  baseReleaseOrder = "<baseReleaseOrder, ...>"
  baseSourceFile = "<baseSourceFile>"
  baseSourceFileStem = "<baseSourceFileStem>"

:baseEpilogS
Section: baseEpilogS

:metaS
Section: metaS

  metaName = "<metaName>"
  metaIDLScopedName = "<metaIDLScopedName>"
  metaCScopedName = "<metaCScopedName>"
  metaComment = "<-- metaComment>"
  metaInclude = "<metaInclude>"
  metaLineNumber = "<metaLineNumber>"
  metaMajorVersion = "<metaMajorVersion>"
  metaMinorVersion = "<metaMinorVersion>"
  metaMods = "<metaMods, ...>"
  metaReleaseOrder = "<metaReleaseOrder, ...>"
  metaSourceFile = "<metaSourceFile>"
  metaSourceFileStem = "<metaSourceFileStem>"

:constantPrologS
Section: constantPrologS

:constantS
Section: constantS

  constantName = "<constantName>"
  constantIDLScopedName = "<constantIDLScopedName>"
  constantCScopedName = "<constantCScopedName>"
  constantComment = "<-- constantComment>"
  constantLineNumber = "<constantLineNumber>"
  constantMods = "<constantMods, ...>"
  constType = "<constantType>"
  constantValueUnevaluated = "<constantValueUnevaluated>"
  constantValueEvaluated = "<constantValueEvaluated>"

:constantEpilogS
Section: constantEpilogS

:typedefPrologS
Section: typedefPrologS

:typedefS
Section: typedefS

  typedefDeclarators = "<typedefDeclarators, ...>"
  typedefBaseType = "<typedefBaseType>"
  typedefComment = "<-- typedefComment>"
  typedefLineNumber = "<typedefLineNumber>"
  typedefMods = "<typedefMods, ...>"

:typedefEpilogS
Section: typedefEpilogS

:structPrologS
Section: structPrologS

:structS
Section: structS

  structName = "<structName>"
  structIDLScopedName = "<structIDLScopedName>"
  structCScopedName = "<structCScopedName>"
  structComment = "<-- structComment>"
  structLineNumber = "<structLineNumber>"
  structMods = "<structMods, ...>"

:structEpilogS
Section: structEpilogS

:unionPrologS
Section: unionPrologS

:unionS
Section: unionS

  unionName = "<unionName>"
  unionIDLScopedName = "<unionIDLScopedName>"
  unionCScopedName = "<unionCScopedName>"
  unionComment = "<-- unionComment>"
  unionLineNumber = "<unionLineNumber>"
  unionMods = "<unionMods, ...>"

:unionEpilogS
Section: unionEpilogS

:enumPrologS
Section: enumPrologS

:enumS
Section: enumS

  enumName = "<enumName>"
  enumIDLScopedName = "<enumIDLScopedName>"
  enumCScopedName = "<enumCScopedName>"
  enumComment = "<-- enumComment>"
  enumLineNumber = "<enumLineNumber>"
  enumMods = "<enumMods, ...>"
  enumNames = "<enumNames, ...>"

:enumEpilogS
Section: enumEpilogS

:attributePrologS
Section: attributePrologS

:attributeS
Section: attributeS

  attributeDeclarators = "<attributeDeclarators, ...>"
  attributeBaseType = "<attributeBaseType>"
  attributeComment = "<-- attributeComment>"
  attributeLineNumber = "<attributeLineNumber>"
  attributeMods = "<attributeMods, ...>"

:attributeEpilogS
Section: attributeEpilogS

:methodsPrologS
Section: methodsPrologS

:methodsS
Section: methodsS

  methodName = "<methodName>"
  methodIDLScopedName = "<methodIDLScopedName>"
  methodCScopedName = "<methodCScopedName>"
  methodComment = "<-- methodComment>"
  methodLineNumber = "<methodLineNumber>"
  methodMods = "<methodMods, ...>"
  methodType = "<methodType>"
  methodCReturnType = "<methodCReturnType>"
  methodContext = "<methodContext, ...>"
  methodRaises = "<methodRaises, ...>"
  methodClassName = "<methodClassName>"
  methodCParamList = "(<methodCParamList, ...>)"
  methodCParamListVA = "(<methodCParamListVA, ...>)"
  methodIDLParamList = "(<methodIDLParamList, ...>)"
  methodShortParamNameList = "(<methodShortParamNameList, ...>)"
  methodFullParamNameList = "(<methodFullParamNameList, ...>)"

:overrideMethodsS
Section: overrideMethodsS

  methodName = "<methodName>"
  methodIDLScopedName = "<methodIDLScopedName>"
  methodCScopedName = "<methodCScopedName>"
  methodComment = "<-- methodComment>"
  methodLineNumber = "<methodLineNumber>"
  methodMods = "<methodMods, ...>"
  methodType = "<methodType>"
  methodCReturnType = "<methodCReturnType>"
  methodContext = "<methodContext, ...>"
  methodRaises = "<methodRaises, ...>"
  methodClassName = "<methodClassName>"
  methodCParamList = "(<methodCParamList, ...>)"
  methodCParamListVA = "(<methodCParamListVA, ...>)"
  methodIDLParamList = "(<methodIDLParamList, ...>)"
  methodShortParamNameList = "(<methodShortParamNameList, ...>)"
  methodFullParamNameList = "(<methodFullParamNameList, ...>)"

:inheritedMethodsS
Section: inheritedMethodsS

  methodName = "<methodName>"
  methodIDLScopedName = "<methodIDLScopedName>"
  methodCScopedName = "<methodCScopedName>"
  methodComment = "<-- methodComment>"
  methodLineNumber = "<methodLineNumber>"
  methodMods = "<methodMods, ...>"
  methodType = "<methodType>"
  methodCReturnType = "<methodCReturnType>"
  methodContext = "<methodContext, ...>"
  methodRaises = "<methodRaises, ...>"
  methodClassName = "<methodClassName>"
  methodCParamList = "(<methodCParamList, ...>)"
  methodCParamListVA = "(<methodCParamListVA, ...>)"
  methodIDLParamList = "(<methodIDLParamList, ...>)"
  methodShortParamNameList = "(<methodShortParamNameList, ...>)"
  methodFullParamNameList = "(<methodFullParamNameList, ...>)"

:methodsEpilogS
Section: methodsEpilogS

:releaseS
Section: releaseS

  classReleaseOrder = "<classReleaseOrder, ...>"

:passthruPrologS
Section: passthruPrologS

:passthruS
Section: passthruS

  passthruName = "<passthruName>"
  passthruComment = "<-- passthruComment>"
  passthruLineNumber = "<passthruLineNumber>"
  passthruMods = "<passthruMods, ...>"
  passthruLanguage = "<passthruLanguage>"
  passthruTarget = "<passthruTarget>"
  passthruBody = "<passthruBody>"

:passthruEpilogS
Section: passthruEpilogS

:dataPrologS
Section: dataPrologS

:dataS
Section: dataS

  dataName = "<dataName>"
  dataIDLScopedName = "<dataIDLScopedName>"
  dataCScopedName = "<dataCScopedName>"
  dataComment = "<-- dataComment>"
  dataLineNumber = "<dataLineNumber>"
  dataMods = "<dataMods, ...>"
  dataType = "<dataType>"
  dataArrayDimensions = "<dataArrayDimensions>"
  dataPointers = "<dataPointers>"

:dataEpilogS
Section: dataEpilogS

:interfacePrologS
Section: interfacePrologS

:interfaceS
Section: interfaceS

  className = "<className>"
  classIDLScopedName = "<classIDLScopedName>"
  classCScopedName = "<classCScopedName>"
  classComment = "<-- classComment>"
  classInclude = "<classInclude>"
  classLineNumber = "<classLineNumber>"
  classMods = "<classMods, ...>"
  classMajorVersion = "<classMajorVersion>"
  classMinorVersion = "<classMinorVersion>"
  classReleaseOrder = "<classReleaseOrder, ...>"
  classSourceFile = "<classSourceFile>"
  classSourceFileStem = "<classSourceFileStem>"

:interfaceEpilogS
Section: interfaceEpilogS

:modulePrologS
Section: modulePrologS

:moduleS
Section: moduleS

  moduleName = "<moduleName>"
  moduleIDLScopedName = "<moduleIDLScopedName>"
  moduleCScopedName = "<moduleCScopedName>"
  moduleComment = "<-- moduleComment>"
  moduleLineNumber = "<moduleLineNumber>"
  moduleMods = "<moduleMods, ...>"

:moduleEpilogS
Section: moduleEpilogS

:epilogS
Section: epilogS
